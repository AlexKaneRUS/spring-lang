//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/alexkane/study/spring-lang/Spring/src/Spring/src/Grammar/HaskellParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class HaskellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, TAB=2, WS=3, COMMENT=4, NCOMMENT=5, OCURLY=6, CCURLY=7, VOCURLY=8, 
		VCCURLY=9, SEMI=10, CASE=11, CLASS=12, DATA=13, DEFAULT=14, DERIVING=15, 
		DO=16, ELSE=17, EXPORT=18, FOREIGN=19, IF=20, IMPORT=21, IN=22, INFIX=23, 
		INFIXL=24, INFIXR=25, INSTANCE=26, LET=27, MODULE=28, NEWTYPE=29, OF=30, 
		THEN=31, TYPE=32, WHERE=33, WILDCARD=34, QUALIFIED=35, AS=36, HIDING=37, 
		LANGUAGE=38, INLINE=39, NOINLINE=40, SPECIALIZE=41, CCALL=42, STDCALL=43, 
		CPPCALL=44, JVMCALL=45, DOTNETCALL=46, SAFE=47, UNSAFE=48, DoubleArrow=49, 
		DoubleColon=50, Arrow=51, Revarrow=52, Hash=53, Less=54, Greater=55, Ampersand=56, 
		Pipe=57, Bang=58, Caret=59, Plus=60, Minus=61, Asterisk=62, Percent=63, 
		Divide=64, Tilde=65, Atsign=66, Dollar=67, Dot=68, Semi=69, DoubleDot=70, 
		QuestionMark=71, OpenRoundBracket=72, CloseRoundBracket=73, OpenSquareBracket=74, 
		CloseSquareBracket=75, OpenCommentBracket=76, CloseCommentBracket=77, 
		Comma=78, Colon=79, Eq=80, Quote=81, DoubleQuote=82, BackQuote=83, CHAR=84, 
		STRING=85, VARID=86, CONID=87, DECIMAL=88, OCTAL=89, HEXADECIMAL=90, FLOAT=91, 
		EXPONENT=92, ASCSYMBOL=93, UNISYMBOL=94;
	public const int
		RULE_module = 0, RULE_pragmas = 1, RULE_pragma = 2, RULE_extension = 3, 
		RULE_body = 4, RULE_impdecls = 5, RULE_exports = 6, RULE_exprt = 7, RULE_impdecl = 8, 
		RULE_impspec = 9, RULE_himport = 10, RULE_cname = 11, RULE_topdecls = 12, 
		RULE_topdecl = 13, RULE_decls = 14, RULE_decl = 15, RULE_specs = 16, RULE_spec = 17, 
		RULE_cdecls = 18, RULE_cdecl = 19, RULE_idecls = 20, RULE_idecl = 21, 
		RULE_gendecl = 22, RULE_ops = 23, RULE_vars = 24, RULE_fixity = 25, RULE_type = 26, 
		RULE_btype = 27, RULE_atype = 28, RULE_gtycon = 29, RULE_typecontext = 30, 
		RULE_cls = 31, RULE_scontext = 32, RULE_simpleclass = 33, RULE_simpletype = 34, 
		RULE_constrs = 35, RULE_constr = 36, RULE_newconstr = 37, RULE_fielddecl = 38, 
		RULE_deriving = 39, RULE_dclass = 40, RULE_inst = 41, RULE_fdecl = 42, 
		RULE_callconv = 43, RULE_impent = 44, RULE_expent = 45, RULE_safety = 46, 
		RULE_funlhs = 47, RULE_rhs = 48, RULE_gdrhs = 49, RULE_gdrh = 50, RULE_guards = 51, 
		RULE_guard = 52, RULE_exp = 53, RULE_infixexp = 54, RULE_lexp = 55, RULE_fexp = 56, 
		RULE_aexp = 57, RULE_qual = 58, RULE_alts = 59, RULE_alt = 60, RULE_gdpats = 61, 
		RULE_ifgdpats = 62, RULE_gdpat = 63, RULE_stmts = 64, RULE_stmt = 65, 
		RULE_fbind = 66, RULE_pat = 67, RULE_lpat = 68, RULE_apat = 69, RULE_fpat = 70, 
		RULE_gcon = 71, RULE_var = 72, RULE_qvar = 73, RULE_con = 74, RULE_qcon = 75, 
		RULE_varop = 76, RULE_qvarop = 77, RULE_conop = 78, RULE_qconop = 79, 
		RULE_op = 80, RULE_qop = 81, RULE_gconsym = 82, RULE_open = 83, RULE_close = 84, 
		RULE_semi = 85, RULE_literal = 86, RULE_special = 87, RULE_varid = 88, 
		RULE_conid = 89, RULE_symbol = 90, RULE_ascSymbol = 91, RULE_varsym = 92, 
		RULE_consym = 93, RULE_tyvar = 94, RULE_tycon = 95, RULE_tycls = 96, RULE_modid = 97, 
		RULE_qvarid = 98, RULE_qconid = 99, RULE_qtycon = 100, RULE_qtycls = 101, 
		RULE_qvarsym = 102, RULE_qconsym = 103, RULE_integer = 104, RULE_pfloat = 105, 
		RULE_pchar = 106, RULE_pstring = 107;
	public static readonly string[] ruleNames = {
		"module", "pragmas", "pragma", "extension", "body", "impdecls", "exports", 
		"exprt", "impdecl", "impspec", "himport", "cname", "topdecls", "topdecl", 
		"decls", "decl", "specs", "spec", "cdecls", "cdecl", "idecls", "idecl", 
		"gendecl", "ops", "vars", "fixity", "type", "btype", "atype", "gtycon", 
		"typecontext", "cls", "scontext", "simpleclass", "simpletype", "constrs", 
		"constr", "newconstr", "fielddecl", "deriving", "dclass", "inst", "fdecl", 
		"callconv", "impent", "expent", "safety", "funlhs", "rhs", "gdrhs", "gdrh", 
		"guards", "guard", "exp", "infixexp", "lexp", "fexp", "aexp", "qual", 
		"alts", "alt", "gdpats", "ifgdpats", "gdpat", "stmts", "stmt", "fbind", 
		"pat", "lpat", "apat", "fpat", "gcon", "var", "qvar", "con", "qcon", "varop", 
		"qvarop", "conop", "qconop", "op", "qop", "gconsym", "open", "close", 
		"semi", "literal", "special", "varid", "conid", "symbol", "ascSymbol", 
		"varsym", "consym", "tyvar", "tycon", "tycls", "modid", "qvarid", "qconid", 
		"qtycon", "qtycls", "qvarsym", "qconsym", "integer", "pfloat", "pchar", 
		"pstring"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'{'", "'}'", "'VOCURLY'", "'VCCURLY'", 
		"'SEMI'", "'case'", "'class'", "'data'", "'default'", "'deriving'", "'do'", 
		"'else'", "'export'", "'foreign'", "'if'", "'import'", "'in'", "'infix'", 
		"'infixl'", "'infixr'", "'instance'", "'let'", "'module'", "'newtype'", 
		"'of'", "'then'", "'type'", "'where'", "'_'", "'qualified'", "'as'", "'hiding'", 
		"'LANGUAGE'", "'INLINE'", "'NOINLINE'", "'SPECIALIZE'", "'ccall'", "'stdcall'", 
		"'cplusplus'", "'jvm'", "'dotnet'", "'safe'", "'unsafe'", "'=>'", "'::'", 
		"'->'", "'<-'", "'#'", "'<'", "'>'", "'&'", "'|'", "'!'", "'^'", "'+'", 
		"'-'", "'*'", "'%'", "'/'", "'~'", "'@'", "'$'", "'.'", "';'", "'..'", 
		"'?'", "'('", "')'", "'['", "']'", "'{-#'", "'#-}'", "','", "':'", "'='", 
		"'''", "'\\'", "'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "TAB", "WS", "COMMENT", "NCOMMENT", "OCURLY", "CCURLY", 
		"VOCURLY", "VCCURLY", "SEMI", "CASE", "CLASS", "DATA", "DEFAULT", "DERIVING", 
		"DO", "ELSE", "EXPORT", "FOREIGN", "IF", "IMPORT", "IN", "INFIX", "INFIXL", 
		"INFIXR", "INSTANCE", "LET", "MODULE", "NEWTYPE", "OF", "THEN", "TYPE", 
		"WHERE", "WILDCARD", "QUALIFIED", "AS", "HIDING", "LANGUAGE", "INLINE", 
		"NOINLINE", "SPECIALIZE", "CCALL", "STDCALL", "CPPCALL", "JVMCALL", "DOTNETCALL", 
		"SAFE", "UNSAFE", "DoubleArrow", "DoubleColon", "Arrow", "Revarrow", "Hash", 
		"Less", "Greater", "Ampersand", "Pipe", "Bang", "Caret", "Plus", "Minus", 
		"Asterisk", "Percent", "Divide", "Tilde", "Atsign", "Dollar", "Dot", "Semi", 
		"DoubleDot", "QuestionMark", "OpenRoundBracket", "CloseRoundBracket", 
		"OpenSquareBracket", "CloseSquareBracket", "OpenCommentBracket", "CloseCommentBracket", 
		"Comma", "Colon", "Eq", "Quote", "DoubleQuote", "BackQuote", "CHAR", "STRING", 
		"VARID", "CONID", "DECIMAL", "OCTAL", "HEXADECIMAL", "FLOAT", "EXPONENT", 
		"ASCSYMBOL", "UNISYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HaskellParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static HaskellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HaskellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HaskellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(HaskellParser.Eof, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public PragmasContext pragmas() {
			return GetRuleContext<PragmasContext>(0);
		}
		public ITerminalNode MODULE() { return GetToken(HaskellParser.MODULE, 0); }
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(HaskellParser.WHERE, 0); }
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public ExportsContext exports() {
			return GetRuleContext<ExportsContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 216; semi();
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 222; pragmas();
				}
				break;
			}
			State = 228;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 225; semi();
					}
					} 
				}
				State = 230;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODULE:
				{
				{
				State = 231; Match(MODULE);
				State = 232; modid();
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenRoundBracket) {
					{
					State = 233; exports();
					}
				}

				State = 236; Match(WHERE);
				State = 237; open();
				State = 238; body();
				State = 239; close();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMI || _la==Semi) {
					{
					{
					State = 240; semi();
					}
					}
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case NEWLINE:
			case SEMI:
			case CLASS:
			case DATA:
			case DEFAULT:
			case FOREIGN:
			case IMPORT:
			case INFIX:
			case INFIXL:
			case INSTANCE:
			case NEWTYPE:
			case TYPE:
			case WILDCARD:
			case AS:
			case HIDING:
			case Minus:
			case Tilde:
			case Semi:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case OpenCommentBracket:
			case CHAR:
			case STRING:
			case VARID:
			case CONID:
			case DECIMAL:
			case OCTAL:
			case HEXADECIMAL:
			case FLOAT:
				{
				State = 246; body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 249; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmasContext : ParserRuleContext {
		public PragmaContext[] pragma() {
			return GetRuleContexts<PragmaContext>();
		}
		public PragmaContext pragma(int i) {
			return GetRuleContext<PragmaContext>(i);
		}
		public PragmasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmas; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterPragmas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitPragmas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragmas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmasContext pragmas() {
		PragmasContext _localctx = new PragmasContext(Context, State);
		EnterRule(_localctx, 2, RULE_pragmas);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 251; pragma();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaContext : ParserRuleContext {
		public ITerminalNode OpenCommentBracket() { return GetToken(HaskellParser.OpenCommentBracket, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(HaskellParser.LANGUAGE, 0); }
		public ExtensionContext[] extension() {
			return GetRuleContexts<ExtensionContext>();
		}
		public ExtensionContext extension(int i) {
			return GetRuleContext<ExtensionContext>(i);
		}
		public ITerminalNode CloseCommentBracket() { return GetToken(HaskellParser.CloseCommentBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public PragmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterPragma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitPragma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PragmaContext pragma() {
		PragmaContext _localctx = new PragmaContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragma);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(OpenCommentBracket);
			State = 257; Match(LANGUAGE);
			State = 258; extension();
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 259; Match(Comma);
				State = 260; extension();
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 266; Match(CloseCommentBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public ExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitExtension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionContext extension() {
		ExtensionContext _localctx = new ExtensionContext(Context, State);
		EnterRule(_localctx, 6, RULE_extension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; conid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ImpdeclsContext impdecls() {
			return GetRuleContext<ImpdeclsContext>(0);
		}
		public TopdeclsContext topdecls() {
			return GetRuleContext<TopdeclsContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 270; impdecls();
				State = 271; topdecls();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; impdecls();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274; topdecls();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpdeclsContext : ParserRuleContext {
		public ImpdeclContext[] impdecl() {
			return GetRuleContexts<ImpdeclContext>();
		}
		public ImpdeclContext impdecl(int i) {
			return GetRuleContext<ImpdeclContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(HaskellParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(HaskellParser.NEWLINE, i);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public ImpdeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impdecls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterImpdecls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitImpdecls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpdecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImpdeclsContext impdecls() {
		ImpdeclsContext _localctx = new ImpdeclsContext(Context, State);
		EnterRule(_localctx, 10, RULE_impdecls);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 280;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case IMPORT:
						{
						State = 277; impdecl();
						}
						break;
					case NEWLINE:
						{
						State = 278; Match(NEWLINE);
						}
						break;
					case SEMI:
					case Semi:
						{
						State = 279; semi();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportsContext : ParserRuleContext {
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ExprtContext[] exprt() {
			return GetRuleContexts<ExprtContext>();
		}
		public ExprtContext exprt(int i) {
			return GetRuleContext<ExprtContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ExportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exports; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterExports(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitExports(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExports(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportsContext exports() {
		ExportsContext _localctx = new ExportsContext(Context, State);
		EnterRule(_localctx, 12, RULE_exports);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(OpenRoundBracket);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (MODULE - 28)) | (1L << (AS - 28)) | (1L << (HIDING - 28)) | (1L << (OpenRoundBracket - 28)) | (1L << (VARID - 28)) | (1L << (CONID - 28)))) != 0)) {
				{
				State = 285; exprt();
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 286; Match(Comma);
						State = 287; exprt();
						}
						} 
					}
					State = 292;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
			}

			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 295; Match(Comma);
				}
			}

			State = 298; Match(CloseRoundBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprtContext : ParserRuleContext {
		public QvarContext[] qvar() {
			return GetRuleContexts<QvarContext>();
		}
		public QvarContext qvar(int i) {
			return GetRuleContext<QvarContext>(i);
		}
		public QtyconContext qtycon() {
			return GetRuleContext<QtyconContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode DoubleDot() { return GetToken(HaskellParser.DoubleDot, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public CnameContext[] cname() {
			return GetRuleContexts<CnameContext>();
		}
		public CnameContext cname(int i) {
			return GetRuleContext<CnameContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public QtyclsContext qtycls() {
			return GetRuleContext<QtyclsContext>(0);
		}
		public ITerminalNode MODULE() { return GetToken(HaskellParser.MODULE, 0); }
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ExprtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterExprt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitExprt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprtContext exprt() {
		ExprtContext _localctx = new ExprtContext(Context, State);
		EnterRule(_localctx, 14, RULE_exprt);
		int _la;
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; qvar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 301; qtycon();
				State = 317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					{
					State = 302; Match(OpenRoundBracket);
					State = 303; Match(DoubleDot);
					State = 304; Match(CloseRoundBracket);
					}
					}
					break;
				case 2:
					{
					{
					State = 305; Match(OpenRoundBracket);
					State = 314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
						{
						State = 306; cname();
						State = 311;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 307; Match(Comma);
							State = 308; cname();
							}
							}
							State = 313;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 316; Match(CloseRoundBracket);
					}
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 319; qtycls();
				State = 335;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					{
					State = 320; Match(OpenRoundBracket);
					State = 321; Match(DoubleDot);
					State = 322; Match(CloseRoundBracket);
					}
					}
					break;
				case 2:
					{
					{
					State = 323; Match(OpenRoundBracket);
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
						{
						State = 324; qvar();
						State = 329;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 325; Match(Comma);
							State = 326; qvar();
							}
							}
							State = 331;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 334; Match(CloseRoundBracket);
					}
					}
					break;
				}
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 337; Match(MODULE);
				State = 338; modid();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpdeclContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(HaskellParser.IMPORT, 0); }
		public ModidContext[] modid() {
			return GetRuleContexts<ModidContext>();
		}
		public ModidContext modid(int i) {
			return GetRuleContext<ModidContext>(i);
		}
		public ITerminalNode QUALIFIED() { return GetToken(HaskellParser.QUALIFIED, 0); }
		public ITerminalNode AS() { return GetToken(HaskellParser.AS, 0); }
		public ImpspecContext impspec() {
			return GetRuleContext<ImpspecContext>(0);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public ImpdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impdecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterImpdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitImpdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImpdeclContext impdecl() {
		ImpdeclContext _localctx = new ImpdeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_impdecl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(IMPORT);
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUALIFIED) {
				{
				State = 342; Match(QUALIFIED);
				}
			}

			State = 345; modid();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 346; Match(AS);
				State = 347; modid();
				}
			}

			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HIDING || _la==OpenRoundBracket) {
				{
				State = 350; impspec();
				}
			}

			State = 354;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 353; semi();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 356;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpspecContext : ParserRuleContext {
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public HimportContext[] himport() {
			return GetRuleContexts<HimportContext>();
		}
		public HimportContext himport(int i) {
			return GetRuleContext<HimportContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ITerminalNode HIDING() { return GetToken(HaskellParser.HIDING, 0); }
		public ImpspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impspec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterImpspec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitImpspec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpspec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImpspecContext impspec() {
		ImpspecContext _localctx = new ImpspecContext(Context, State);
		EnterRule(_localctx, 18, RULE_impspec);
		int _la;
		try {
			int _alt;
			State = 389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 358; Match(OpenRoundBracket);
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
					{
					State = 359; himport();
					State = 364;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 360; Match(Comma);
							State = 361; himport();
							}
							} 
						}
						State = 366;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
					}
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Comma) {
						{
						State = 367; Match(Comma);
						}
					}

					}
				}

				State = 372; Match(CloseRoundBracket);
				}
				}
				break;
			case HIDING:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 373; Match(HIDING);
				State = 374; Match(OpenRoundBracket);
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
					{
					State = 375; himport();
					State = 380;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 376; Match(Comma);
							State = 377; himport();
							}
							} 
						}
						State = 382;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
					}
					State = 384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Comma) {
						{
						State = 383; Match(Comma);
						}
					}

					}
				}

				State = 388; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HimportContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public TyconContext tycon() {
			return GetRuleContext<TyconContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode DoubleDot() { return GetToken(HaskellParser.DoubleDot, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public CnameContext[] cname() {
			return GetRuleContexts<CnameContext>();
		}
		public CnameContext cname(int i) {
			return GetRuleContext<CnameContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public TyclsContext tycls() {
			return GetRuleContext<TyclsContext>(0);
		}
		public HimportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_himport; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterHimport(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitHimport(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHimport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HimportContext himport() {
		HimportContext _localctx = new HimportContext(Context, State);
		EnterRule(_localctx, 20, RULE_himport);
		int _la;
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 392; tycon();
				State = 408;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					{
					State = 393; Match(OpenRoundBracket);
					State = 394; Match(DoubleDot);
					State = 395; Match(CloseRoundBracket);
					}
					}
					break;
				case 2:
					{
					{
					State = 396; Match(OpenRoundBracket);
					State = 405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
						{
						State = 397; cname();
						State = 402;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 398; Match(Comma);
							State = 399; cname();
							}
							}
							State = 404;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 407; Match(CloseRoundBracket);
					}
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 410; tycls();
				State = 426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
				case 1:
					{
					{
					State = 411; Match(OpenRoundBracket);
					State = 412; Match(DoubleDot);
					State = 413; Match(CloseRoundBracket);
					}
					}
					break;
				case 2:
					{
					{
					State = 414; Match(OpenRoundBracket);
					State = 423;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)))) != 0)) {
						{
						State = 415; var();
						State = 420;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 416; Match(Comma);
							State = 417; var();
							}
							}
							State = 422;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 425; Match(CloseRoundBracket);
					}
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CnameContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ConContext con() {
			return GetRuleContext<ConContext>(0);
		}
		public CnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterCname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitCname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CnameContext cname() {
		CnameContext _localctx = new CnameContext(Context, State);
		EnterRule(_localctx, 22, RULE_cname);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; con();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopdeclsContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(HaskellParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(HaskellParser.NEWLINE, i);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public TopdeclContext[] topdecl() {
			return GetRuleContexts<TopdeclContext>();
		}
		public TopdeclContext topdecl(int i) {
			return GetRuleContext<TopdeclContext>(i);
		}
		public TopdeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topdecls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterTopdecls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitTopdecls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopdecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopdeclsContext topdecls() {
		TopdeclsContext _localctx = new TopdeclsContext(Context, State);
		EnterRule(_localctx, 24, RULE_topdecls);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 442;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					{
					State = 434; topdecl();
					State = 436;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 435; semi();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 438;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				case 2:
					{
					State = 440; Match(NEWLINE);
					}
					break;
				case 3:
					{
					State = 441; semi();
					}
					break;
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWLINE) | (1L << SEMI) | (1L << CLASS) | (1L << DATA) | (1L << DEFAULT) | (1L << FOREIGN) | (1L << INFIX) | (1L << INFIXL) | (1L << INSTANCE) | (1L << NEWTYPE) | (1L << TYPE) | (1L << WILDCARD) | (1L << AS) | (1L << HIDING) | (1L << Minus))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Tilde - 65)) | (1L << (Semi - 65)) | (1L << (OpenRoundBracket - 65)) | (1L << (OpenSquareBracket - 65)) | (1L << (OpenCommentBracket - 65)) | (1L << (CHAR - 65)) | (1L << (STRING - 65)) | (1L << (VARID - 65)) | (1L << (CONID - 65)) | (1L << (DECIMAL - 65)) | (1L << (OCTAL - 65)) | (1L << (HEXADECIMAL - 65)) | (1L << (FLOAT - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopdeclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(HaskellParser.TYPE, 0); }
		public SimpletypeContext simpletype() {
			return GetRuleContext<SimpletypeContext>(0);
		}
		public ITerminalNode Eq() { return GetToken(HaskellParser.Eq, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode DATA() { return GetToken(HaskellParser.DATA, 0); }
		public TypecontextContext typecontext() {
			return GetRuleContext<TypecontextContext>(0);
		}
		public ITerminalNode DoubleArrow() { return GetToken(HaskellParser.DoubleArrow, 0); }
		public ConstrsContext constrs() {
			return GetRuleContext<ConstrsContext>(0);
		}
		public DerivingContext deriving() {
			return GetRuleContext<DerivingContext>(0);
		}
		public ITerminalNode NEWTYPE() { return GetToken(HaskellParser.NEWTYPE, 0); }
		public NewconstrContext newconstr() {
			return GetRuleContext<NewconstrContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(HaskellParser.CLASS, 0); }
		public TyclsContext tycls() {
			return GetRuleContext<TyclsContext>(0);
		}
		public TyvarContext tyvar() {
			return GetRuleContext<TyvarContext>(0);
		}
		public ScontextContext scontext() {
			return GetRuleContext<ScontextContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(HaskellParser.WHERE, 0); }
		public CdeclsContext cdecls() {
			return GetRuleContext<CdeclsContext>(0);
		}
		public ITerminalNode INSTANCE() { return GetToken(HaskellParser.INSTANCE, 0); }
		public QtyclsContext qtycls() {
			return GetRuleContext<QtyclsContext>(0);
		}
		public InstContext inst() {
			return GetRuleContext<InstContext>(0);
		}
		public IdeclsContext idecls() {
			return GetRuleContext<IdeclsContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(HaskellParser.DEFAULT, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ITerminalNode FOREIGN() { return GetToken(HaskellParser.FOREIGN, 0); }
		public FdeclContext fdecl() {
			return GetRuleContext<FdeclContext>(0);
		}
		public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		public TopdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topdecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterTopdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitTopdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopdeclContext topdecl() {
		TopdeclContext _localctx = new TopdeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_topdecl);
		int _la;
		try {
			State = 517;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 446; Match(TYPE);
				State = 447; simpletype();
				State = 448; Match(Eq);
				State = 449; type();
				}
				}
				break;
			case DATA:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 451; Match(DATA);
				State = 455;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 452; typecontext();
					State = 453; Match(DoubleArrow);
					}
					break;
				}
				State = 457; simpletype();
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Eq) {
					{
					State = 458; Match(Eq);
					State = 459; constrs();
					}
				}

				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DERIVING) {
					{
					State = 462; deriving();
					}
				}

				}
				}
				break;
			case NEWTYPE:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 465; Match(NEWTYPE);
				State = 469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 466; typecontext();
					State = 467; Match(DoubleArrow);
					}
					break;
				}
				State = 471; simpletype();
				State = 472; Match(Eq);
				State = 473; newconstr();
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DERIVING) {
					{
					State = 474; deriving();
					}
				}

				}
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 477; Match(CLASS);
				State = 481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 478; scontext();
					State = 479; Match(DoubleArrow);
					}
					break;
				}
				State = 483; tycls();
				State = 484; tyvar();
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 485; Match(WHERE);
					State = 486; cdecls();
					}
				}

				}
				}
				break;
			case INSTANCE:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 489; Match(INSTANCE);
				State = 493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 490; scontext();
					State = 491; Match(DoubleArrow);
					}
					break;
				}
				State = 495; qtycls();
				State = 496; inst();
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 497; Match(WHERE);
					State = 498; idecls();
					}
				}

				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 501; Match(DEFAULT);
				State = 502; Match(OpenRoundBracket);
				State = 511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (OpenSquareBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
					{
					State = 503; type();
					State = 508;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 504; Match(Comma);
						State = 505; type();
						}
						}
						State = 510;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 513; Match(CloseRoundBracket);
				}
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 514; Match(FOREIGN);
				State = 515; fdecl();
				}
				}
				break;
			case SEMI:
			case INFIX:
			case INFIXL:
			case WILDCARD:
			case AS:
			case HIDING:
			case Minus:
			case Tilde:
			case Semi:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case OpenCommentBracket:
			case CHAR:
			case STRING:
			case VARID:
			case CONID:
			case DECIMAL:
			case OCTAL:
			case HEXADECIMAL:
			case FLOAT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 516; decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclsContext : ParserRuleContext {
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public DeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterDecls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitDecls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclsContext decls() {
		DeclsContext _localctx = new DeclsContext(Context, State);
		EnterRule(_localctx, 28, RULE_decls);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 519; open();
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEMI) | (1L << INFIX) | (1L << INFIXL) | (1L << WILDCARD) | (1L << AS) | (1L << HIDING) | (1L << Minus))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Tilde - 65)) | (1L << (Semi - 65)) | (1L << (OpenRoundBracket - 65)) | (1L << (OpenSquareBracket - 65)) | (1L << (OpenCommentBracket - 65)) | (1L << (CHAR - 65)) | (1L << (STRING - 65)) | (1L << (VARID - 65)) | (1L << (CONID - 65)) | (1L << (DECIMAL - 65)) | (1L << (OCTAL - 65)) | (1L << (HEXADECIMAL - 65)) | (1L << (FLOAT - 65)))) != 0)) {
				{
				State = 528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 520; decl();
						State = 522;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 521; semi();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 524;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						} 
					}
					State = 530;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				}
				State = 531; decl();
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMI || _la==Semi) {
					{
					{
					State = 532; semi();
					}
					}
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 540; close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public ITerminalNode OpenCommentBracket() { return GetToken(HaskellParser.OpenCommentBracket, 0); }
		public ITerminalNode INLINE() { return GetToken(HaskellParser.INLINE, 0); }
		public QvarContext qvar() {
			return GetRuleContext<QvarContext>(0);
		}
		public ITerminalNode CloseCommentBracket() { return GetToken(HaskellParser.CloseCommentBracket, 0); }
		public ITerminalNode NOINLINE() { return GetToken(HaskellParser.NOINLINE, 0); }
		public ITerminalNode SPECIALIZE() { return GetToken(HaskellParser.SPECIALIZE, 0); }
		public SpecsContext specs() {
			return GetRuleContext<SpecsContext>(0);
		}
		public GendeclContext gendecl() {
			return GetRuleContext<GendeclContext>(0);
		}
		public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		public FunlhsContext funlhs() {
			return GetRuleContext<FunlhsContext>(0);
		}
		public PatContext pat() {
			return GetRuleContext<PatContext>(0);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_decl);
		try {
			int _alt;
			State = 569;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542; Match(OpenCommentBracket);
				State = 543; Match(INLINE);
				State = 544; qvar();
				State = 545; Match(CloseCommentBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547; Match(OpenCommentBracket);
				State = 548; Match(NOINLINE);
				State = 549; qvar();
				State = 550; Match(CloseCommentBracket);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 552; Match(OpenCommentBracket);
				State = 553; Match(SPECIALIZE);
				State = 554; specs();
				State = 555; Match(CloseCommentBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 557; gendecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 560;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 558; funlhs();
					}
					break;
				case 2:
					{
					State = 559; pat();
					}
					break;
				}
				State = 562; rhs();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 565;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 564; semi();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 567;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecsContext : ParserRuleContext {
		public SpecContext[] spec() {
			return GetRuleContexts<SpecContext>();
		}
		public SpecContext spec(int i) {
			return GetRuleContext<SpecContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public SpecsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSpecs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSpecs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecsContext specs() {
		SpecsContext _localctx = new SpecsContext(Context, State);
		EnterRule(_localctx, 32, RULE_specs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; spec();
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 572; Match(Comma);
				State = 573; spec();
				}
				}
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecContext : ParserRuleContext {
		public VarsContext vars() {
			return GetRuleContext<VarsContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(HaskellParser.DoubleColon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spec; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSpec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecContext spec() {
		SpecContext _localctx = new SpecContext(Context, State);
		EnterRule(_localctx, 34, RULE_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; vars();
			State = 580; Match(DoubleColon);
			State = 581; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CdeclsContext : ParserRuleContext {
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public CdeclContext[] cdecl() {
			return GetRuleContexts<CdeclContext>();
		}
		public CdeclContext cdecl(int i) {
			return GetRuleContext<CdeclContext>(i);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public CdeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cdecls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterCdecls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitCdecls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCdecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CdeclsContext cdecls() {
		CdeclsContext _localctx = new CdeclsContext(Context, State);
		EnterRule(_localctx, 36, RULE_cdecls);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; open();
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INFIX) | (1L << INFIXL) | (1L << WILDCARD) | (1L << AS) | (1L << HIDING) | (1L << Minus))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Tilde - 65)) | (1L << (OpenRoundBracket - 65)) | (1L << (OpenSquareBracket - 65)) | (1L << (CHAR - 65)) | (1L << (STRING - 65)) | (1L << (VARID - 65)) | (1L << (CONID - 65)) | (1L << (DECIMAL - 65)) | (1L << (OCTAL - 65)) | (1L << (HEXADECIMAL - 65)) | (1L << (FLOAT - 65)))) != 0)) {
				{
				State = 592;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 584; cdecl();
						State = 586;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 585; semi();
							}
							}
							State = 588;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==SEMI || _la==Semi );
						}
						} 
					}
					State = 594;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 595; cdecl();
				State = 599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMI || _la==Semi) {
					{
					{
					State = 596; semi();
					}
					}
					State = 601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 604; close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CdeclContext : ParserRuleContext {
		public GendeclContext gendecl() {
			return GetRuleContext<GendeclContext>(0);
		}
		public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		public FunlhsContext funlhs() {
			return GetRuleContext<FunlhsContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cdecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterCdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitCdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CdeclContext cdecl() {
		CdeclContext _localctx = new CdeclContext(Context, State);
		EnterRule(_localctx, 38, RULE_cdecl);
		try {
			State = 613;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 606; gendecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 609;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 607; funlhs();
					}
					break;
				case 2:
					{
					State = 608; var();
					}
					break;
				}
				State = 611; rhs();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdeclsContext : ParserRuleContext {
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public IdeclContext[] idecl() {
			return GetRuleContexts<IdeclContext>();
		}
		public IdeclContext idecl(int i) {
			return GetRuleContext<IdeclContext>(i);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public IdeclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idecls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterIdecls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitIdecls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdecls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdeclsContext idecls() {
		IdeclsContext _localctx = new IdeclsContext(Context, State);
		EnterRule(_localctx, 40, RULE_idecls);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; open();
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (WILDCARD - 34)) | (1L << (AS - 34)) | (1L << (HIDING - 34)) | (1L << (Minus - 34)) | (1L << (Tilde - 34)) | (1L << (OpenRoundBracket - 34)) | (1L << (OpenSquareBracket - 34)) | (1L << (CHAR - 34)) | (1L << (STRING - 34)) | (1L << (VARID - 34)) | (1L << (CONID - 34)) | (1L << (DECIMAL - 34)) | (1L << (OCTAL - 34)) | (1L << (HEXADECIMAL - 34)) | (1L << (FLOAT - 34)))) != 0)) {
				{
				State = 624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 616; idecl();
						State = 618;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 617; semi();
							}
							}
							State = 620;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==SEMI || _la==Semi );
						}
						} 
					}
					State = 626;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
				}
				State = 627; idecl();
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMI || _la==Semi) {
					{
					{
					State = 628; semi();
					}
					}
					State = 633;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 636; close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdeclContext : ParserRuleContext {
		public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		public FunlhsContext funlhs() {
			return GetRuleContext<FunlhsContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterIdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitIdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdeclContext idecl() {
		IdeclContext _localctx = new IdeclContext(Context, State);
		EnterRule(_localctx, 42, RULE_idecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 638; funlhs();
				}
				break;
			case 2:
				{
				State = 639; var();
				}
				break;
			}
			State = 642; rhs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GendeclContext : ParserRuleContext {
		public VarsContext vars() {
			return GetRuleContext<VarsContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(HaskellParser.DoubleColon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypecontextContext typecontext() {
			return GetRuleContext<TypecontextContext>(0);
		}
		public ITerminalNode DoubleArrow() { return GetToken(HaskellParser.DoubleArrow, 0); }
		public FixityContext fixity() {
			return GetRuleContext<FixityContext>(0);
		}
		public OpsContext ops() {
			return GetRuleContext<OpsContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(HaskellParser.DECIMAL, 0); }
		public GendeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gendecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGendecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGendecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGendecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GendeclContext gendecl() {
		GendeclContext _localctx = new GendeclContext(Context, State);
		EnterRule(_localctx, 44, RULE_gendecl);
		int _la;
		try {
			State = 659;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case HIDING:
			case OpenRoundBracket:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644; vars();
				State = 645; Match(DoubleColon);
				State = 649;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 646; typecontext();
					State = 647; Match(DoubleArrow);
					}
					break;
				}
				State = 651; type();
				}
				break;
			case INFIX:
			case INFIXL:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 653; fixity();
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECIMAL) {
					{
					State = 654; Match(DECIMAL);
					}
				}

				State = 657; ops();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpsContext : ParserRuleContext {
		public OpContext[] op() {
			return GetRuleContexts<OpContext>();
		}
		public OpContext op(int i) {
			return GetRuleContext<OpContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public OpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitOps(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpsContext ops() {
		OpsContext _localctx = new OpsContext(Context, State);
		EnterRule(_localctx, 46, RULE_ops);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661; op();
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 662; Match(Comma);
				State = 663; op();
				}
				}
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsContext : ParserRuleContext {
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public VarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterVars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitVars(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVars(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsContext vars() {
		VarsContext _localctx = new VarsContext(Context, State);
		EnterRule(_localctx, 48, RULE_vars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669; var();
			State = 674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 670; Match(Comma);
				State = 671; var();
				}
				}
				State = 676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixityContext : ParserRuleContext {
		public ITerminalNode INFIX() { return GetToken(HaskellParser.INFIX, 0); }
		public ITerminalNode INFIXL() { return GetToken(HaskellParser.INFIXL, 0); }
		public FixityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterFixity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitFixity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FixityContext fixity() {
		FixityContext _localctx = new FixityContext(Context, State);
		EnterRule(_localctx, 50, RULE_fixity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			_la = TokenStream.LA(1);
			if ( !(_la==INFIX || _la==INFIXL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BtypeContext btype() {
			return GetRuleContext<BtypeContext>(0);
		}
		public ITerminalNode Arrow() { return GetToken(HaskellParser.Arrow, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679; btype();
			State = 682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 680; Match(Arrow);
				State = 681; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BtypeContext : ParserRuleContext {
		public AtypeContext[] atype() {
			return GetRuleContexts<AtypeContext>();
		}
		public AtypeContext atype(int i) {
			return GetRuleContext<AtypeContext>(i);
		}
		public BtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_btype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterBtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitBtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BtypeContext btype() {
		BtypeContext _localctx = new BtypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_btype);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 684; atype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 687;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtypeContext : ParserRuleContext {
		public GtyconContext gtycon() {
			return GetRuleContext<GtyconContext>(0);
		}
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ITerminalNode OpenSquareBracket() { return GetToken(HaskellParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(HaskellParser.CloseSquareBracket, 0); }
		public AtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterAtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitAtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtypeContext atype() {
		AtypeContext _localctx = new AtypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_atype);
		int _la;
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 689; gtycon();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 690; varid();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 691; Match(OpenRoundBracket);
				State = 692; type();
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 693; Match(Comma);
					State = 694; type();
					}
					}
					State = 699;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 700; Match(CloseRoundBracket);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 702; Match(OpenSquareBracket);
				State = 703; type();
				State = 704; Match(CloseSquareBracket);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 706; Match(OpenRoundBracket);
				State = 707; type();
				State = 708; Match(CloseRoundBracket);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GtyconContext : ParserRuleContext {
		public QtyconContext qtycon() {
			return GetRuleContext<QtyconContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode OpenSquareBracket() { return GetToken(HaskellParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(HaskellParser.CloseSquareBracket, 0); }
		public ITerminalNode Arrow() { return GetToken(HaskellParser.Arrow, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ITerminalNode OCURLY() { return GetToken(HaskellParser.OCURLY, 0); }
		public ITerminalNode CCURLY() { return GetToken(HaskellParser.CCURLY, 0); }
		public GtyconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gtycon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGtycon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGtycon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtycon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GtyconContext gtycon() {
		GtyconContext _localctx = new GtyconContext(Context, State);
		EnterRule(_localctx, 58, RULE_gtycon);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712; qtycon();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 713; Match(OpenRoundBracket);
				State = 714; Match(CloseRoundBracket);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 715; Match(OpenSquareBracket);
				State = 716; Match(CloseSquareBracket);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 717; Match(OpenRoundBracket);
				State = 718; Match(Arrow);
				State = 719; Match(CloseRoundBracket);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 720; Match(OpenRoundBracket);
				State = 721; Match(Comma);
				State = 722; Match(OCURLY);
				State = 723; Match(Comma);
				State = 724; Match(CCURLY);
				State = 725; Match(CloseRoundBracket);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypecontextContext : ParserRuleContext {
		public ClsContext[] cls() {
			return GetRuleContexts<ClsContext>();
		}
		public ClsContext cls(int i) {
			return GetRuleContext<ClsContext>(i);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public TypecontextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typecontext; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterTypecontext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitTypecontext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecontext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypecontextContext typecontext() {
		TypecontextContext _localctx = new TypecontextContext(Context, State);
		EnterRule(_localctx, 60, RULE_typecontext);
		int _la;
		try {
			State = 740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 728; cls();
				}
				break;
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 729; Match(OpenRoundBracket);
				State = 730; cls();
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 731; Match(Comma);
					State = 732; cls();
					}
					}
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 738; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClsContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public QtyclsContext qtycls() {
			return GetRuleContext<QtyclsContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public TyvarContext tyvar() {
			return GetRuleContext<TyvarContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public AtypeContext[] atype() {
			return GetRuleContexts<AtypeContext>();
		}
		public AtypeContext atype(int i) {
			return GetRuleContext<AtypeContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ClsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterCls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitCls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClsContext cls() {
		ClsContext _localctx = new ClsContext(Context, State);
		EnterRule(_localctx, 62, RULE_cls);
		int _la;
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 742; conid();
				State = 743; varid();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 745; qtycls();
				State = 746; Match(OpenRoundBracket);
				State = 747; tyvar();
				{
				State = 748; atype();
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 749; Match(Comma);
					State = 750; atype();
					}
					}
					State = 755;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 756; Match(CloseRoundBracket);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScontextContext : ParserRuleContext {
		public SimpleclassContext[] simpleclass() {
			return GetRuleContexts<SimpleclassContext>();
		}
		public SimpleclassContext simpleclass(int i) {
			return GetRuleContext<SimpleclassContext>(i);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ScontextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scontext; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterScontext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitScontext(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScontext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScontextContext scontext() {
		ScontextContext _localctx = new ScontextContext(Context, State);
		EnterRule(_localctx, 64, RULE_scontext);
		int _la;
		try {
			State = 773;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 760; simpleclass();
				}
				break;
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 761; Match(OpenRoundBracket);
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONID) {
					{
					State = 762; simpleclass();
					State = 767;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 763; Match(Comma);
						State = 764; simpleclass();
						}
						}
						State = 769;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 772; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleclassContext : ParserRuleContext {
		public QtyclsContext qtycls() {
			return GetRuleContext<QtyclsContext>(0);
		}
		public TyvarContext tyvar() {
			return GetRuleContext<TyvarContext>(0);
		}
		public SimpleclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSimpleclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSimpleclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleclassContext simpleclass() {
		SimpleclassContext _localctx = new SimpleclassContext(Context, State);
		EnterRule(_localctx, 66, RULE_simpleclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775; qtycls();
			State = 776; tyvar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypeContext : ParserRuleContext {
		public TyconContext tycon() {
			return GetRuleContext<TyconContext>(0);
		}
		public TyvarContext[] tyvar() {
			return GetRuleContexts<TyvarContext>();
		}
		public TyvarContext tyvar(int i) {
			return GetRuleContext<TyvarContext>(i);
		}
		public SimpletypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSimpletype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSimpletype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpletype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypeContext simpletype() {
		SimpletypeContext _localctx = new SimpletypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_simpletype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; tycon();
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (VARID - 36)))) != 0)) {
				{
				{
				State = 779; tyvar();
				}
				}
				State = 784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrsContext : ParserRuleContext {
		public ConstrContext[] constr() {
			return GetRuleContexts<ConstrContext>();
		}
		public ConstrContext constr(int i) {
			return GetRuleContext<ConstrContext>(i);
		}
		public ITerminalNode[] Pipe() { return GetTokens(HaskellParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(HaskellParser.Pipe, i);
		}
		public ConstrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterConstrs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitConstrs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstrsContext constrs() {
		ConstrsContext _localctx = new ConstrsContext(Context, State);
		EnterRule(_localctx, 70, RULE_constrs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; constr();
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Pipe) {
				{
				{
				State = 786; Match(Pipe);
				State = 787; constr();
				}
				}
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrContext : ParserRuleContext {
		public ConContext con() {
			return GetRuleContext<ConContext>(0);
		}
		public AtypeContext[] atype() {
			return GetRuleContexts<AtypeContext>();
		}
		public AtypeContext atype(int i) {
			return GetRuleContext<AtypeContext>(i);
		}
		public ITerminalNode[] Bang() { return GetTokens(HaskellParser.Bang); }
		public ITerminalNode Bang(int i) {
			return GetToken(HaskellParser.Bang, i);
		}
		public ConopContext conop() {
			return GetRuleContext<ConopContext>(0);
		}
		public BtypeContext[] btype() {
			return GetRuleContexts<BtypeContext>();
		}
		public BtypeContext btype(int i) {
			return GetRuleContext<BtypeContext>(i);
		}
		public ITerminalNode OCURLY() { return GetToken(HaskellParser.OCURLY, 0); }
		public ITerminalNode CCURLY() { return GetToken(HaskellParser.CCURLY, 0); }
		public FielddeclContext[] fielddecl() {
			return GetRuleContexts<FielddeclContext>();
		}
		public FielddeclContext fielddecl(int i) {
			return GetRuleContext<FielddeclContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ConstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterConstr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitConstr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstrContext constr() {
		ConstrContext _localctx = new ConstrContext(Context, State);
		EnterRule(_localctx, 72, RULE_constr);
		int _la;
		try {
			State = 828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 793; con();
				State = 800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (Bang - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (OpenSquareBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
					{
					{
					State = 795;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Bang) {
						{
						State = 794; Match(Bang);
						}
					}

					State = 797; atype();
					}
					}
					State = 802;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 806;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
				case HIDING:
				case OpenRoundBracket:
				case OpenSquareBracket:
				case VARID:
				case CONID:
					{
					State = 803; btype();
					}
					break;
				case Bang:
					{
					{
					State = 804; Match(Bang);
					State = 805; atype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 808; conop();
				State = 812;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
				case HIDING:
				case OpenRoundBracket:
				case OpenSquareBracket:
				case VARID:
				case CONID:
					{
					State = 809; btype();
					}
					break;
				case Bang:
					{
					{
					State = 810; Match(Bang);
					State = 811; atype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 814; con();
				State = 815; Match(OCURLY);
				State = 824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)))) != 0)) {
					{
					State = 816; fielddecl();
					State = 821;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 817; Match(Comma);
						State = 818; fielddecl();
						}
						}
						State = 823;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 826; Match(CCURLY);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewconstrContext : ParserRuleContext {
		public ConContext con() {
			return GetRuleContext<ConContext>(0);
		}
		public AtypeContext atype() {
			return GetRuleContext<AtypeContext>(0);
		}
		public ITerminalNode OCURLY() { return GetToken(HaskellParser.OCURLY, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(HaskellParser.DoubleColon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CCURLY() { return GetToken(HaskellParser.CCURLY, 0); }
		public NewconstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newconstr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterNewconstr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitNewconstr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewconstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewconstrContext newconstr() {
		NewconstrContext _localctx = new NewconstrContext(Context, State);
		EnterRule(_localctx, 74, RULE_newconstr);
		try {
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 830; con();
				State = 831; atype();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 833; con();
				State = 834; Match(OCURLY);
				State = 835; var();
				State = 836; Match(DoubleColon);
				State = 837; type();
				State = 838; Match(CCURLY);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FielddeclContext : ParserRuleContext {
		public VarsContext vars() {
			return GetRuleContext<VarsContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(HaskellParser.DoubleColon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Bang() { return GetToken(HaskellParser.Bang, 0); }
		public AtypeContext atype() {
			return GetRuleContext<AtypeContext>(0);
		}
		public FielddeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterFielddecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitFielddecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFielddecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FielddeclContext fielddecl() {
		FielddeclContext _localctx = new FielddeclContext(Context, State);
		EnterRule(_localctx, 76, RULE_fielddecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; vars();
			State = 843; Match(DoubleColon);
			State = 847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case HIDING:
			case OpenRoundBracket:
			case OpenSquareBracket:
			case VARID:
			case CONID:
				{
				State = 844; type();
				}
				break;
			case Bang:
				{
				{
				State = 845; Match(Bang);
				State = 846; atype();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivingContext : ParserRuleContext {
		public ITerminalNode DERIVING() { return GetToken(HaskellParser.DERIVING, 0); }
		public DclassContext[] dclass() {
			return GetRuleContexts<DclassContext>();
		}
		public DclassContext dclass(int i) {
			return GetRuleContext<DclassContext>(i);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public DerivingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deriving; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterDeriving(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitDeriving(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeriving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerivingContext deriving() {
		DerivingContext _localctx = new DerivingContext(Context, State);
		EnterRule(_localctx, 78, RULE_deriving);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(DERIVING);
			State = 863;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONID:
				{
				State = 850; dclass();
				}
				break;
			case OpenRoundBracket:
				{
				{
				State = 851; Match(OpenRoundBracket);
				State = 860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONID) {
					{
					State = 852; dclass();
					State = 857;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 853; Match(Comma);
						State = 854; dclass();
						}
						}
						State = 859;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 862; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclassContext : ParserRuleContext {
		public QtyclsContext qtycls() {
			return GetRuleContext<QtyclsContext>(0);
		}
		public DclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterDclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitDclass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDclass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclassContext dclass() {
		DclassContext _localctx = new DclassContext(Context, State);
		EnterRule(_localctx, 80, RULE_dclass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 865; qtycls();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstContext : ParserRuleContext {
		public GtyconContext gtycon() {
			return GetRuleContext<GtyconContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public TyvarContext[] tyvar() {
			return GetRuleContexts<TyvarContext>();
		}
		public TyvarContext tyvar(int i) {
			return GetRuleContext<TyvarContext>(i);
		}
		public TyconContext[] tycon() {
			return GetRuleContexts<TyconContext>();
		}
		public TyconContext tycon(int i) {
			return GetRuleContext<TyconContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ITerminalNode OpenSquareBracket() { return GetToken(HaskellParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(HaskellParser.CloseSquareBracket, 0); }
		public ITerminalNode Arrow() { return GetToken(HaskellParser.Arrow, 0); }
		public InstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inst; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterInst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitInst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstContext inst() {
		InstContext _localctx = new InstContext(Context, State);
		EnterRule(_localctx, 82, RULE_inst);
		int _la;
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 867; gtycon();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 868; Match(OpenRoundBracket);
				State = 869; gtycon();
				State = 873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (VARID - 36)))) != 0)) {
					{
					{
					State = 870; tyvar();
					}
					}
					State = 875;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 876; Match(CloseRoundBracket);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 878; Match(OpenRoundBracket);
				State = 879; gtycon();
				State = 883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CONID) {
					{
					{
					State = 880; tycon();
					}
					}
					State = 885;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 886; Match(CloseRoundBracket);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 888; Match(OpenRoundBracket);
				State = 889; tyvar();
				State = 890; Match(Comma);
				State = 891; tyvar();
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 892; Match(Comma);
					State = 893; tyvar();
					}
					}
					State = 898;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 899; Match(CloseRoundBracket);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 901; Match(OpenSquareBracket);
				State = 902; tyvar();
				State = 903; Match(CloseSquareBracket);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 905; Match(OpenRoundBracket);
				State = 906; tyvar();
				State = 907; Match(Arrow);
				State = 908; tyvar();
				State = 909; Match(CloseRoundBracket);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FdeclContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(HaskellParser.IMPORT, 0); }
		public CallconvContext callconv() {
			return GetRuleContext<CallconvContext>(0);
		}
		public ImpentContext impent() {
			return GetRuleContext<ImpentContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(HaskellParser.DoubleColon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SafetyContext safety() {
			return GetRuleContext<SafetyContext>(0);
		}
		public ITerminalNode EXPORT() { return GetToken(HaskellParser.EXPORT, 0); }
		public ExpentContext expent() {
			return GetRuleContext<ExpentContext>(0);
		}
		public FdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterFdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitFdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FdeclContext fdecl() {
		FdeclContext _localctx = new FdeclContext(Context, State);
		EnterRule(_localctx, 84, RULE_fdecl);
		int _la;
		try {
			State = 930;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 913; Match(IMPORT);
				State = 914; callconv();
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SAFE || _la==UNSAFE) {
					{
					State = 915; safety();
					}
				}

				State = 918; impent();
				State = 919; var();
				State = 920; Match(DoubleColon);
				State = 921; type();
				}
				}
				break;
			case EXPORT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 923; Match(EXPORT);
				State = 924; callconv();
				State = 925; expent();
				State = 926; var();
				State = 927; Match(DoubleColon);
				State = 928; type();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallconvContext : ParserRuleContext {
		public ITerminalNode CCALL() { return GetToken(HaskellParser.CCALL, 0); }
		public ITerminalNode STDCALL() { return GetToken(HaskellParser.STDCALL, 0); }
		public ITerminalNode CPPCALL() { return GetToken(HaskellParser.CPPCALL, 0); }
		public ITerminalNode JVMCALL() { return GetToken(HaskellParser.JVMCALL, 0); }
		public ITerminalNode DOTNETCALL() { return GetToken(HaskellParser.DOTNETCALL, 0); }
		public CallconvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callconv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterCallconv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitCallconv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallconv(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallconvContext callconv() {
		CallconvContext _localctx = new CallconvContext(Context, State);
		EnterRule(_localctx, 86, RULE_callconv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 932;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CCALL) | (1L << STDCALL) | (1L << CPPCALL) | (1L << JVMCALL) | (1L << DOTNETCALL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpentContext : ParserRuleContext {
		public PstringContext pstring() {
			return GetRuleContext<PstringContext>(0);
		}
		public ImpentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterImpent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitImpent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImpent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImpentContext impent() {
		ImpentContext _localctx = new ImpentContext(Context, State);
		EnterRule(_localctx, 88, RULE_impent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934; pstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpentContext : ParserRuleContext {
		public PstringContext pstring() {
			return GetRuleContext<PstringContext>(0);
		}
		public ExpentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterExpent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitExpent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpentContext expent() {
		ExpentContext _localctx = new ExpentContext(Context, State);
		EnterRule(_localctx, 90, RULE_expent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 936; pstring();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SafetyContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(HaskellParser.UNSAFE, 0); }
		public ITerminalNode SAFE() { return GetToken(HaskellParser.SAFE, 0); }
		public SafetyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_safety; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSafety(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSafety(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSafety(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SafetyContext safety() {
		SafetyContext _localctx = new SafetyContext(Context, State);
		EnterRule(_localctx, 92, RULE_safety);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			_la = TokenStream.LA(1);
			if ( !(_la==SAFE || _la==UNSAFE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunlhsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ApatContext[] apat() {
			return GetRuleContexts<ApatContext>();
		}
		public ApatContext apat(int i) {
			return GetRuleContext<ApatContext>(i);
		}
		public PatContext[] pat() {
			return GetRuleContexts<PatContext>();
		}
		public PatContext pat(int i) {
			return GetRuleContext<PatContext>(i);
		}
		public VaropContext varop() {
			return GetRuleContext<VaropContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public FunlhsContext funlhs() {
			return GetRuleContext<FunlhsContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public FunlhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funlhs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterFunlhs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitFunlhs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunlhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunlhsContext funlhs() {
		FunlhsContext _localctx = new FunlhsContext(Context, State);
		EnterRule(_localctx, 94, RULE_funlhs);
		int _la;
		try {
			State = 958;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 940; var();
				State = 942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 941; apat();
					}
					}
					State = 944;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (WILDCARD - 34)) | (1L << (AS - 34)) | (1L << (HIDING - 34)) | (1L << (Tilde - 34)) | (1L << (OpenRoundBracket - 34)) | (1L << (OpenSquareBracket - 34)) | (1L << (CHAR - 34)) | (1L << (STRING - 34)) | (1L << (VARID - 34)) | (1L << (CONID - 34)) | (1L << (DECIMAL - 34)) | (1L << (OCTAL - 34)) | (1L << (HEXADECIMAL - 34)) | (1L << (FLOAT - 34)))) != 0) );
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 946; pat();
				State = 947; varop();
				State = 948; pat();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 950; Match(OpenRoundBracket);
				State = 951; funlhs();
				State = 952; Match(CloseRoundBracket);
				State = 954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 953; apat();
					}
					}
					State = 956;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (WILDCARD - 34)) | (1L << (AS - 34)) | (1L << (HIDING - 34)) | (1L << (Tilde - 34)) | (1L << (OpenRoundBracket - 34)) | (1L << (OpenSquareBracket - 34)) | (1L << (CHAR - 34)) | (1L << (STRING - 34)) | (1L << (VARID - 34)) | (1L << (CONID - 34)) | (1L << (DECIMAL - 34)) | (1L << (OCTAL - 34)) | (1L << (HEXADECIMAL - 34)) | (1L << (FLOAT - 34)))) != 0) );
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RhsContext : ParserRuleContext {
		public ITerminalNode Eq() { return GetToken(HaskellParser.Eq, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(HaskellParser.WHERE, 0); }
		public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		public GdrhsContext gdrhs() {
			return GetRuleContext<GdrhsContext>(0);
		}
		public RhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterRhs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitRhs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RhsContext rhs() {
		RhsContext _localctx = new RhsContext(Context, State);
		EnterRule(_localctx, 96, RULE_rhs);
		int _la;
		try {
			State = 971;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eq:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 960; Match(Eq);
				State = 961; exp();
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 962; Match(WHERE);
					State = 963; decls();
					}
				}

				}
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 966; gdrhs();
				State = 969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 967; Match(WHERE);
					State = 968; decls();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdrhsContext : ParserRuleContext {
		public GdrhContext[] gdrh() {
			return GetRuleContexts<GdrhContext>();
		}
		public GdrhContext gdrh(int i) {
			return GetRuleContext<GdrhContext>(i);
		}
		public GdrhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gdrhs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGdrhs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGdrhs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdrhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdrhsContext gdrhs() {
		GdrhsContext _localctx = new GdrhsContext(Context, State);
		EnterRule(_localctx, 98, RULE_gdrhs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 973; gdrh();
				}
				}
				State = 976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Pipe );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdrhContext : ParserRuleContext {
		public ITerminalNode Pipe() { return GetToken(HaskellParser.Pipe, 0); }
		public GuardsContext guards() {
			return GetRuleContext<GuardsContext>(0);
		}
		public ITerminalNode Eq() { return GetToken(HaskellParser.Eq, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public GdrhContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gdrh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGdrh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGdrh(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdrh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdrhContext gdrh() {
		GdrhContext _localctx = new GdrhContext(Context, State);
		EnterRule(_localctx, 100, RULE_gdrh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978; Match(Pipe);
			State = 979; guards();
			State = 980; Match(Eq);
			State = 981; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardsContext : ParserRuleContext {
		public GuardContext[] guard() {
			return GetRuleContexts<GuardContext>();
		}
		public GuardContext guard(int i) {
			return GetRuleContext<GuardContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public GuardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGuards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGuards(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuards(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardsContext guards() {
		GuardsContext _localctx = new GuardsContext(Context, State);
		EnterRule(_localctx, 102, RULE_guards);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983; guard();
			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 984; Match(Comma);
				State = 985; guard();
				}
				}
				State = 990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		public PatContext pat() {
			return GetRuleContext<PatContext>(0);
		}
		public ITerminalNode Revarrow() { return GetToken(HaskellParser.Revarrow, 0); }
		public InfixexpContext infixexp() {
			return GetRuleContext<InfixexpContext>(0);
		}
		public ITerminalNode LET() { return GetToken(HaskellParser.LET, 0); }
		public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGuard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGuard(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 104, RULE_guard);
		try {
			State = 998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 991; pat();
				State = 992; Match(Revarrow);
				State = 993; infixexp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 995; Match(LET);
				State = 996; decls();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 997; infixexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public InfixexpContext infixexp() {
			return GetRuleContext<InfixexpContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(HaskellParser.DoubleColon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypecontextContext typecontext() {
			return GetRuleContext<TypecontextContext>(0);
		}
		public ITerminalNode DoubleArrow() { return GetToken(HaskellParser.DoubleArrow, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 106, RULE_exp);
		try {
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1000; infixexp();
				State = 1001; Match(DoubleColon);
				State = 1005;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
				case 1:
					{
					State = 1002; typecontext();
					State = 1003; Match(DoubleArrow);
					}
					break;
				}
				State = 1007; type();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1009; infixexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfixexpContext : ParserRuleContext {
		public LexpContext lexp() {
			return GetRuleContext<LexpContext>(0);
		}
		public QopContext qop() {
			return GetRuleContext<QopContext>(0);
		}
		public InfixexpContext infixexp() {
			return GetRuleContext<InfixexpContext>(0);
		}
		public ITerminalNode Minus() { return GetToken(HaskellParser.Minus, 0); }
		public InfixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infixexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterInfixexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitInfixexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InfixexpContext infixexp() {
		InfixexpContext _localctx = new InfixexpContext(Context, State);
		EnterRule(_localctx, 108, RULE_infixexp);
		try {
			State = 1019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1012; lexp();
				State = 1013; qop();
				State = 1014; infixexp();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1016; Match(Minus);
				State = 1017; infixexp();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1018; lexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexpContext : ParserRuleContext {
		public ITerminalNode DoubleQuote() { return GetToken(HaskellParser.DoubleQuote, 0); }
		public ITerminalNode Arrow() { return GetToken(HaskellParser.Arrow, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ApatContext[] apat() {
			return GetRuleContexts<ApatContext>();
		}
		public ApatContext apat(int i) {
			return GetRuleContext<ApatContext>(i);
		}
		public ITerminalNode LET() { return GetToken(HaskellParser.LET, 0); }
		public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		public ITerminalNode IN() { return GetToken(HaskellParser.IN, 0); }
		public ITerminalNode IF() { return GetToken(HaskellParser.IF, 0); }
		public ITerminalNode THEN() { return GetToken(HaskellParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(HaskellParser.ELSE, 0); }
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public IfgdpatsContext ifgdpats() {
			return GetRuleContext<IfgdpatsContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(HaskellParser.CASE, 0); }
		public ITerminalNode OF() { return GetToken(HaskellParser.OF, 0); }
		public AltsContext alts() {
			return GetRuleContext<AltsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(HaskellParser.DO, 0); }
		public StmtsContext stmts() {
			return GetRuleContext<StmtsContext>(0);
		}
		public FexpContext fexp() {
			return GetRuleContext<FexpContext>(0);
		}
		public LexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterLexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitLexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexpContext lexp() {
		LexpContext _localctx = new LexpContext(Context, State);
		EnterRule(_localctx, 110, RULE_lexp);
		int _la;
		try {
			State = 1058;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1021; Match(DoubleQuote);
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1022; apat();
					}
					}
					State = 1025;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (WILDCARD - 34)) | (1L << (AS - 34)) | (1L << (HIDING - 34)) | (1L << (Tilde - 34)) | (1L << (OpenRoundBracket - 34)) | (1L << (OpenSquareBracket - 34)) | (1L << (CHAR - 34)) | (1L << (STRING - 34)) | (1L << (VARID - 34)) | (1L << (CONID - 34)) | (1L << (DECIMAL - 34)) | (1L << (OCTAL - 34)) | (1L << (HEXADECIMAL - 34)) | (1L << (FLOAT - 34)))) != 0) );
				State = 1027; Match(Arrow);
				State = 1028; exp();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1030; Match(LET);
				State = 1031; decls();
				State = 1032; Match(IN);
				State = 1033; exp();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1035; Match(IF);
				State = 1036; exp();
				State = 1038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI || _la==Semi) {
					{
					State = 1037; semi();
					}
				}

				State = 1040; Match(THEN);
				State = 1041; exp();
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI || _la==Semi) {
					{
					State = 1042; semi();
					}
				}

				State = 1045; Match(ELSE);
				State = 1046; exp();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 1048; Match(IF);
				State = 1049; ifgdpats();
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 1050; Match(CASE);
				State = 1051; exp();
				State = 1052; Match(OF);
				State = 1053; alts();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 1055; Match(DO);
				State = 1056; stmts();
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1057; fexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FexpContext : ParserRuleContext {
		public AexpContext[] aexp() {
			return GetRuleContexts<AexpContext>();
		}
		public AexpContext aexp(int i) {
			return GetRuleContext<AexpContext>(i);
		}
		public FexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterFexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitFexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FexpContext fexp() {
		FexpContext _localctx = new FexpContext(Context, State);
		EnterRule(_localctx, 112, RULE_fexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1060; aexp();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1063;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AexpContext : ParserRuleContext {
		public QvarContext qvar() {
			return GetRuleContext<QvarContext>(0);
		}
		public GconContext gcon() {
			return GetRuleContext<GconContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public ITerminalNode OpenSquareBracket() { return GetToken(HaskellParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(HaskellParser.CloseSquareBracket, 0); }
		public ITerminalNode DoubleDot() { return GetToken(HaskellParser.DoubleDot, 0); }
		public ITerminalNode Pipe() { return GetToken(HaskellParser.Pipe, 0); }
		public QualContext[] qual() {
			return GetRuleContexts<QualContext>();
		}
		public QualContext qual(int i) {
			return GetRuleContext<QualContext>(i);
		}
		public InfixexpContext infixexp() {
			return GetRuleContext<InfixexpContext>(0);
		}
		public QopContext qop() {
			return GetRuleContext<QopContext>(0);
		}
		public QconContext qcon() {
			return GetRuleContext<QconContext>(0);
		}
		public ITerminalNode[] OCURLY() { return GetTokens(HaskellParser.OCURLY); }
		public ITerminalNode OCURLY(int i) {
			return GetToken(HaskellParser.OCURLY, i);
		}
		public ITerminalNode[] CCURLY() { return GetTokens(HaskellParser.CCURLY); }
		public ITerminalNode CCURLY(int i) {
			return GetToken(HaskellParser.CCURLY, i);
		}
		public FbindContext[] fbind() {
			return GetRuleContexts<FbindContext>();
		}
		public FbindContext fbind(int i) {
			return GetRuleContext<FbindContext>(i);
		}
		public AexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterAexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitAexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AexpContext aexp() {
		AexpContext _localctx = new AexpContext(Context, State);
		EnterRule(_localctx, 114, RULE_aexp);
		int _la;
		try {
			int _alt;
			State = 1156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1065; qvar();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1066; gcon();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1067; literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 1068; Match(OpenRoundBracket);
				State = 1069; exp();
				State = 1070; Match(CloseRoundBracket);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 1072; Match(OpenRoundBracket);
				State = 1073; exp();
				State = 1074; Match(Comma);
				State = 1075; exp();
				State = 1080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1076; Match(Comma);
					State = 1077; exp();
					}
					}
					State = 1082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1083; Match(CloseRoundBracket);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 1085; Match(OpenSquareBracket);
				State = 1086; exp();
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1087; Match(Comma);
					State = 1088; exp();
					}
					}
					State = 1093;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1094; Match(CloseSquareBracket);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 1096; Match(OpenSquareBracket);
				State = 1097; exp();
				State = 1100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1098; Match(Comma);
					State = 1099; exp();
					}
				}

				State = 1102; Match(DoubleDot);
				State = 1104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OCURLY) | (1L << CASE) | (1L << DO) | (1L << IF) | (1L << LET) | (1L << AS) | (1L << HIDING) | (1L << Minus))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OpenRoundBracket - 72)) | (1L << (OpenSquareBracket - 72)) | (1L << (DoubleQuote - 72)) | (1L << (CHAR - 72)) | (1L << (STRING - 72)) | (1L << (VARID - 72)) | (1L << (CONID - 72)) | (1L << (DECIMAL - 72)) | (1L << (OCTAL - 72)) | (1L << (HEXADECIMAL - 72)) | (1L << (FLOAT - 72)))) != 0)) {
					{
					State = 1103; exp();
					}
				}

				State = 1106; Match(CloseSquareBracket);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 1108; Match(OpenSquareBracket);
				State = 1109; exp();
				State = 1110; Match(Pipe);
				State = 1111; qual();
				State = 1116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1112; Match(Comma);
					State = 1113; qual();
					}
					}
					State = 1118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1119; Match(CloseSquareBracket);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				{
				State = 1121; Match(OpenRoundBracket);
				State = 1122; infixexp();
				State = 1123; qop();
				State = 1124; Match(CloseRoundBracket);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				{
				State = 1126; Match(OpenRoundBracket);
				State = 1127; qop();
				State = 1128; infixexp();
				State = 1129; Match(CloseRoundBracket);
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				{
				State = 1131; qcon();
				State = 1132; Match(OCURLY);
				State = 1137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
					{
					State = 1133; fbind();
					{
					State = 1134; Match(Comma);
					State = 1135; fbind();
					}
					}
				}

				State = 1139; Match(CCURLY);
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1152;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1141; Match(OCURLY);
						State = 1142; fbind();
						State = 1147;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 1143; Match(Comma);
							State = 1144; fbind();
							}
							}
							State = 1149;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 1150; Match(CCURLY);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1154;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualContext : ParserRuleContext {
		public PatContext pat() {
			return GetRuleContext<PatContext>(0);
		}
		public ITerminalNode Revarrow() { return GetToken(HaskellParser.Revarrow, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode LET() { return GetToken(HaskellParser.LET, 0); }
		public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		public QualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQual(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualContext qual() {
		QualContext _localctx = new QualContext(Context, State);
		EnterRule(_localctx, 116, RULE_qual);
		try {
			State = 1165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1158; pat();
				State = 1159; Match(Revarrow);
				State = 1160; exp();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1162; Match(LET);
				State = 1163; decls();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1164; exp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltsContext : ParserRuleContext {
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public AltContext[] alt() {
			return GetRuleContexts<AltContext>();
		}
		public AltContext alt(int i) {
			return GetRuleContext<AltContext>(i);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public AltsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterAlts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitAlts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltsContext alts() {
		AltsContext _localctx = new AltsContext(Context, State);
		EnterRule(_localctx, 118, RULE_alts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167; open();
			State = 1174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1168; alt();
				State = 1170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1169; semi();
					}
					}
					State = 1172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SEMI || _la==Semi );
				}
				}
				State = 1176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (WILDCARD - 34)) | (1L << (AS - 34)) | (1L << (HIDING - 34)) | (1L << (Minus - 34)) | (1L << (Tilde - 34)) | (1L << (OpenRoundBracket - 34)) | (1L << (OpenSquareBracket - 34)) | (1L << (CHAR - 34)) | (1L << (STRING - 34)) | (1L << (VARID - 34)) | (1L << (CONID - 34)) | (1L << (DECIMAL - 34)) | (1L << (OCTAL - 34)) | (1L << (HEXADECIMAL - 34)) | (1L << (FLOAT - 34)))) != 0) );
			State = 1178; close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltContext : ParserRuleContext {
		public PatContext pat() {
			return GetRuleContext<PatContext>(0);
		}
		public ITerminalNode Arrow() { return GetToken(HaskellParser.Arrow, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(HaskellParser.WHERE, 0); }
		public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		public GdpatsContext gdpats() {
			return GetRuleContext<GdpatsContext>(0);
		}
		public AltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterAlt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitAlt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AltContext alt() {
		AltContext _localctx = new AltContext(Context, State);
		EnterRule(_localctx, 120, RULE_alt);
		int _la;
		try {
			State = 1193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1180; pat();
				State = 1181; Match(Arrow);
				State = 1182; exp();
				State = 1185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1183; Match(WHERE);
					State = 1184; decls();
					}
				}

				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1187; pat();
				State = 1188; gdpats();
				State = 1191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 1189; Match(WHERE);
					State = 1190; decls();
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdpatsContext : ParserRuleContext {
		public GdpatContext[] gdpat() {
			return GetRuleContexts<GdpatContext>();
		}
		public GdpatContext gdpat(int i) {
			return GetRuleContext<GdpatContext>(i);
		}
		public GdpatsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gdpats; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGdpats(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGdpats(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdpats(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdpatsContext gdpats() {
		GdpatsContext _localctx = new GdpatsContext(Context, State);
		EnterRule(_localctx, 122, RULE_gdpats);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1195; gdpat();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfgdpatsContext : ParserRuleContext {
		public ITerminalNode OCURLY() { return GetToken(HaskellParser.OCURLY, 0); }
		public GdpatsContext gdpats() {
			return GetRuleContext<GdpatsContext>(0);
		}
		public ITerminalNode CCURLY() { return GetToken(HaskellParser.CCURLY, 0); }
		public IfgdpatsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifgdpats; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterIfgdpats(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitIfgdpats(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfgdpats(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfgdpatsContext ifgdpats() {
		IfgdpatsContext _localctx = new IfgdpatsContext(Context, State);
		EnterRule(_localctx, 124, RULE_ifgdpats);
		try {
			State = 1205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OCURLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1200; Match(OCURLY);
				State = 1201; gdpats();
				State = 1202; Match(CCURLY);
				}
				break;
			case Pipe:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1204; gdpats();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GdpatContext : ParserRuleContext {
		public ITerminalNode Pipe() { return GetToken(HaskellParser.Pipe, 0); }
		public GuardsContext guards() {
			return GetRuleContext<GuardsContext>(0);
		}
		public ITerminalNode Arrow() { return GetToken(HaskellParser.Arrow, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public GdpatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gdpat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGdpat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGdpat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGdpat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GdpatContext gdpat() {
		GdpatContext _localctx = new GdpatContext(Context, State);
		EnterRule(_localctx, 126, RULE_gdpat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207; Match(Pipe);
			State = 1208; guards();
			State = 1209; Match(Arrow);
			State = 1210; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtsContext : ParserRuleContext {
		public OpenContext open() {
			return GetRuleContext<OpenContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public CloseContext close() {
			return GetRuleContext<CloseContext>(0);
		}
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public StmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterStmts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitStmts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtsContext stmts() {
		StmtsContext _localctx = new StmtsContext(Context, State);
		EnterRule(_localctx, 128, RULE_stmts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212; open();
			State = 1216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1213; stmt();
					}
					} 
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			State = 1219; exp();
			State = 1223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI || _la==Semi) {
				{
				{
				State = 1220; semi();
				}
				}
				State = 1225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1226; close();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public SemiContext[] semi() {
			return GetRuleContexts<SemiContext>();
		}
		public SemiContext semi(int i) {
			return GetRuleContext<SemiContext>(i);
		}
		public PatContext pat() {
			return GetRuleContext<PatContext>(0);
		}
		public ITerminalNode Revarrow() { return GetToken(HaskellParser.Revarrow, 0); }
		public ITerminalNode LET() { return GetToken(HaskellParser.LET, 0); }
		public DeclsContext decls() {
			return GetRuleContext<DeclsContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 130, RULE_stmt);
		try {
			int _alt;
			State = 1254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1228; exp();
				State = 1230;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1229; semi();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1232;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,147,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1234; pat();
				State = 1235; Match(Revarrow);
				State = 1236; exp();
				State = 1238;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1237; semi();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1240;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,148,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1242; Match(LET);
				State = 1243; decls();
				State = 1245;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1244; semi();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1247;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1250;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1249; semi();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1252;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FbindContext : ParserRuleContext {
		public QvarContext qvar() {
			return GetRuleContext<QvarContext>(0);
		}
		public ITerminalNode Eq() { return GetToken(HaskellParser.Eq, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public FbindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fbind; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterFbind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitFbind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFbind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FbindContext fbind() {
		FbindContext _localctx = new FbindContext(Context, State);
		EnterRule(_localctx, 132, RULE_fbind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256; qvar();
			State = 1257; Match(Eq);
			State = 1258; exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatContext : ParserRuleContext {
		public LpatContext lpat() {
			return GetRuleContext<LpatContext>(0);
		}
		public QconopContext qconop() {
			return GetRuleContext<QconopContext>(0);
		}
		public PatContext pat() {
			return GetRuleContext<PatContext>(0);
		}
		public PatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterPat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitPat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatContext pat() {
		PatContext _localctx = new PatContext(Context, State);
		EnterRule(_localctx, 134, RULE_pat);
		try {
			State = 1265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1260; lpat();
				State = 1261; qconop();
				State = 1262; pat();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1264; lpat();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LpatContext : ParserRuleContext {
		public ApatContext[] apat() {
			return GetRuleContexts<ApatContext>();
		}
		public ApatContext apat(int i) {
			return GetRuleContext<ApatContext>(i);
		}
		public ITerminalNode Minus() { return GetToken(HaskellParser.Minus, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public PfloatContext pfloat() {
			return GetRuleContext<PfloatContext>(0);
		}
		public GconContext gcon() {
			return GetRuleContext<GconContext>(0);
		}
		public LpatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lpat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterLpat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitLpat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLpat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LpatContext lpat() {
		LpatContext _localctx = new LpatContext(Context, State);
		EnterRule(_localctx, 136, RULE_lpat);
		try {
			int _alt;
			State = 1279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1267; apat();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1268; Match(Minus);
				State = 1271;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DECIMAL:
				case OCTAL:
				case HEXADECIMAL:
					{
					State = 1269; integer();
					}
					break;
				case FLOAT:
					{
					State = 1270; pfloat();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1273; gcon();
				State = 1275;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1274; apat();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1277;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,154,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApatContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode Atsign() { return GetToken(HaskellParser.Atsign, 0); }
		public ApatContext apat() {
			return GetRuleContext<ApatContext>(0);
		}
		public GconContext gcon() {
			return GetRuleContext<GconContext>(0);
		}
		public QconContext qcon() {
			return GetRuleContext<QconContext>(0);
		}
		public ITerminalNode OCURLY() { return GetToken(HaskellParser.OCURLY, 0); }
		public ITerminalNode CCURLY() { return GetToken(HaskellParser.CCURLY, 0); }
		public FpatContext[] fpat() {
			return GetRuleContexts<FpatContext>();
		}
		public FpatContext fpat(int i) {
			return GetRuleContext<FpatContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode WILDCARD() { return GetToken(HaskellParser.WILDCARD, 0); }
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public PatContext[] pat() {
			return GetRuleContexts<PatContext>();
		}
		public PatContext pat(int i) {
			return GetRuleContext<PatContext>(i);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode OpenSquareBracket() { return GetToken(HaskellParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(HaskellParser.CloseSquareBracket, 0); }
		public ITerminalNode Tilde() { return GetToken(HaskellParser.Tilde, 0); }
		public ApatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterApat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitApat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApatContext apat() {
		ApatContext _localctx = new ApatContext(Context, State);
		EnterRule(_localctx, 138, RULE_apat);
		int _la;
		try {
			State = 1333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1281; var();
				State = 1284;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 1282; Match(Atsign);
					State = 1283; apat();
					}
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1286; gcon();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1287; qcon();
				State = 1288; Match(OCURLY);
				State = 1297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (OpenRoundBracket - 36)) | (1L << (VARID - 36)) | (1L << (CONID - 36)))) != 0)) {
					{
					State = 1289; fpat();
					State = 1294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 1290; Match(Comma);
						State = 1291; fpat();
						}
						}
						State = 1296;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1299; Match(CCURLY);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1301; literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1302; Match(WILDCARD);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 1303; Match(OpenRoundBracket);
				State = 1304; pat();
				State = 1305; Match(CloseRoundBracket);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 1307; Match(OpenRoundBracket);
				State = 1308; pat();
				State = 1309; Match(Comma);
				State = 1310; pat();
				State = 1315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1311; Match(Comma);
					State = 1312; pat();
					}
					}
					State = 1317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1318; Match(CloseRoundBracket);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 1320; Match(OpenSquareBracket);
				State = 1321; pat();
				State = 1326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 1322; Match(Comma);
					State = 1323; pat();
					}
					}
					State = 1328;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1329; Match(CloseSquareBracket);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				{
				State = 1331; Match(Tilde);
				State = 1332; apat();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FpatContext : ParserRuleContext {
		public QvarContext qvar() {
			return GetRuleContext<QvarContext>(0);
		}
		public ITerminalNode Eq() { return GetToken(HaskellParser.Eq, 0); }
		public PatContext pat() {
			return GetRuleContext<PatContext>(0);
		}
		public FpatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fpat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterFpat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitFpat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFpat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FpatContext fpat() {
		FpatContext _localctx = new FpatContext(Context, State);
		EnterRule(_localctx, 140, RULE_fpat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335; qvar();
			State = 1336; Match(Eq);
			State = 1337; pat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GconContext : ParserRuleContext {
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode OpenSquareBracket() { return GetToken(HaskellParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(HaskellParser.CloseSquareBracket, 0); }
		public ITerminalNode[] Comma() { return GetTokens(HaskellParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(HaskellParser.Comma, i);
		}
		public QconContext qcon() {
			return GetRuleContext<QconContext>(0);
		}
		public GconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gcon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGcon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGcon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGcon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GconContext gcon() {
		GconContext _localctx = new GconContext(Context, State);
		EnterRule(_localctx, 142, RULE_gcon);
		int _la;
		try {
			State = 1351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 1339; Match(OpenRoundBracket);
				State = 1340; Match(CloseRoundBracket);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1341; Match(OpenSquareBracket);
				State = 1342; Match(CloseSquareBracket);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 1343; Match(OpenRoundBracket);
				State = 1345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1344; Match(Comma);
					}
					}
					State = 1347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 1349; Match(CloseRoundBracket);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1350; qcon();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public VarsymContext varsym() {
			return GetRuleContext<VarsymContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 144, RULE_var);
		try {
			State = 1358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case HIDING:
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1353; varid();
				}
				break;
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1354; Match(OpenRoundBracket);
				State = 1355; varsym();
				State = 1356; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QvarContext : ParserRuleContext {
		public QvaridContext qvarid() {
			return GetRuleContext<QvaridContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public QvarsymContext qvarsym() {
			return GetRuleContext<QvarsymContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public QvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QvarContext qvar() {
		QvarContext _localctx = new QvarContext(Context, State);
		EnterRule(_localctx, 146, RULE_qvar);
		try {
			State = 1365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case HIDING:
			case VARID:
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1360; qvarid();
				}
				break;
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1361; Match(OpenRoundBracket);
				State = 1362; qvarsym();
				State = 1363; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ConsymContext consym() {
			return GetRuleContext<ConsymContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ConContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_con; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterCon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitCon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConContext con() {
		ConContext _localctx = new ConContext(Context, State);
		EnterRule(_localctx, 148, RULE_con);
		try {
			State = 1372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1367; conid();
				}
				break;
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1368; Match(OpenRoundBracket);
				State = 1369; consym();
				State = 1370; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QconContext : ParserRuleContext {
		public QconidContext qconid() {
			return GetRuleContext<QconidContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public GconsymContext gconsym() {
			return GetRuleContext<GconsymContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public QconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qcon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQcon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQcon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQcon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QconContext qcon() {
		QconContext _localctx = new QconContext(Context, State);
		EnterRule(_localctx, 150, RULE_qcon);
		try {
			State = 1379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1374; qconid();
				}
				break;
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1375; Match(OpenRoundBracket);
				State = 1376; gconsym();
				State = 1377; Match(CloseRoundBracket);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaropContext : ParserRuleContext {
		public VarsymContext varsym() {
			return GetRuleContext<VarsymContext>(0);
		}
		public ITerminalNode[] BackQuote() { return GetTokens(HaskellParser.BackQuote); }
		public ITerminalNode BackQuote(int i) {
			return GetToken(HaskellParser.BackQuote, i);
		}
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public VaropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterVarop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitVarop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VaropContext varop() {
		VaropContext _localctx = new VaropContext(Context, State);
		EnterRule(_localctx, 152, RULE_varop);
		try {
			State = 1386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Hash:
			case Less:
			case Greater:
			case Ampersand:
			case Pipe:
			case Bang:
			case Caret:
			case Plus:
			case Minus:
			case Asterisk:
			case Percent:
			case Divide:
			case Tilde:
			case Atsign:
			case Dollar:
			case Dot:
			case QuestionMark:
			case Colon:
			case Eq:
			case DoubleQuote:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1381; varsym();
				}
				break;
			case BackQuote:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1382; Match(BackQuote);
				State = 1383; varid();
				State = 1384; Match(BackQuote);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QvaropContext : ParserRuleContext {
		public QvarsymContext qvarsym() {
			return GetRuleContext<QvarsymContext>(0);
		}
		public ITerminalNode[] BackQuote() { return GetTokens(HaskellParser.BackQuote); }
		public ITerminalNode BackQuote(int i) {
			return GetToken(HaskellParser.BackQuote, i);
		}
		public QvaridContext qvarid() {
			return GetRuleContext<QvaridContext>(0);
		}
		public QvaropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qvarop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQvarop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQvarop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQvarop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QvaropContext qvarop() {
		QvaropContext _localctx = new QvaropContext(Context, State);
		EnterRule(_localctx, 154, RULE_qvarop);
		try {
			State = 1393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Hash:
			case Less:
			case Greater:
			case Ampersand:
			case Pipe:
			case Bang:
			case Caret:
			case Plus:
			case Minus:
			case Asterisk:
			case Percent:
			case Divide:
			case Tilde:
			case Atsign:
			case Dollar:
			case Dot:
			case QuestionMark:
			case Colon:
			case Eq:
			case DoubleQuote:
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1388; qvarsym();
				}
				break;
			case BackQuote:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1389; Match(BackQuote);
				State = 1390; qvarid();
				State = 1391; Match(BackQuote);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConopContext : ParserRuleContext {
		public ConsymContext consym() {
			return GetRuleContext<ConsymContext>(0);
		}
		public ITerminalNode[] BackQuote() { return GetTokens(HaskellParser.BackQuote); }
		public ITerminalNode BackQuote(int i) {
			return GetToken(HaskellParser.BackQuote, i);
		}
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public ConopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterConop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitConop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConopContext conop() {
		ConopContext _localctx = new ConopContext(Context, State);
		EnterRule(_localctx, 156, RULE_conop);
		try {
			State = 1400;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Colon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1395; consym();
				}
				break;
			case BackQuote:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1396; Match(BackQuote);
				State = 1397; conid();
				State = 1398; Match(BackQuote);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QconopContext : ParserRuleContext {
		public GconsymContext gconsym() {
			return GetRuleContext<GconsymContext>(0);
		}
		public ITerminalNode[] BackQuote() { return GetTokens(HaskellParser.BackQuote); }
		public ITerminalNode BackQuote(int i) {
			return GetToken(HaskellParser.BackQuote, i);
		}
		public QconidContext qconid() {
			return GetRuleContext<QconidContext>(0);
		}
		public QconopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qconop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQconop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQconop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQconop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QconopContext qconop() {
		QconopContext _localctx = new QconopContext(Context, State);
		EnterRule(_localctx, 158, RULE_qconop);
		try {
			State = 1407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Colon:
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1402; gconsym();
				}
				break;
			case BackQuote:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 1403; Match(BackQuote);
				State = 1404; qconid();
				State = 1405; Match(BackQuote);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public VaropContext varop() {
			return GetRuleContext<VaropContext>(0);
		}
		public ConopContext conop() {
			return GetRuleContext<ConopContext>(0);
		}
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 160, RULE_op);
		try {
			State = 1411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1409; varop();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1410; conop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QopContext : ParserRuleContext {
		public QvaropContext qvarop() {
			return GetRuleContext<QvaropContext>(0);
		}
		public QconopContext qconop() {
			return GetRuleContext<QconopContext>(0);
		}
		public QopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QopContext qop() {
		QopContext _localctx = new QopContext(Context, State);
		EnterRule(_localctx, 162, RULE_qop);
		try {
			State = 1415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1413; qvarop();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1414; qconop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GconsymContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(HaskellParser.Colon, 0); }
		public QconsymContext qconsym() {
			return GetRuleContext<QconsymContext>(0);
		}
		public GconsymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gconsym; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterGconsym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitGconsym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGconsym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GconsymContext gconsym() {
		GconsymContext _localctx = new GconsymContext(Context, State);
		EnterRule(_localctx, 164, RULE_gconsym);
		try {
			State = 1419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1417; Match(Colon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1418; qconsym();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenContext : ParserRuleContext {
		public ITerminalNode VOCURLY() { return GetToken(HaskellParser.VOCURLY, 0); }
		public ITerminalNode OCURLY() { return GetToken(HaskellParser.OCURLY, 0); }
		public OpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterOpen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitOpen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenContext open() {
		OpenContext _localctx = new OpenContext(Context, State);
		EnterRule(_localctx, 166, RULE_open);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421;
			_la = TokenStream.LA(1);
			if ( !(_la==OCURLY || _la==VOCURLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseContext : ParserRuleContext {
		public ITerminalNode VCCURLY() { return GetToken(HaskellParser.VCCURLY, 0); }
		public ITerminalNode CCURLY() { return GetToken(HaskellParser.CCURLY, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterClose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitClose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseContext close() {
		CloseContext _localctx = new CloseContext(Context, State);
		EnterRule(_localctx, 168, RULE_close);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423;
			_la = TokenStream.LA(1);
			if ( !(_la==CCURLY || _la==VCCURLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SemiContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(HaskellParser.Semi, 0); }
		public ITerminalNode SEMI() { return GetToken(HaskellParser.SEMI, 0); }
		public SemiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSemi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSemi(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SemiContext semi() {
		SemiContext _localctx = new SemiContext(Context, State);
		EnterRule(_localctx, 170, RULE_semi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1425;
			_la = TokenStream.LA(1);
			if ( !(_la==SEMI || _la==Semi) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public PfloatContext pfloat() {
			return GetRuleContext<PfloatContext>(0);
		}
		public PcharContext pchar() {
			return GetRuleContext<PcharContext>(0);
		}
		public PstringContext pstring() {
			return GetRuleContext<PstringContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 172, RULE_literal);
		try {
			State = 1431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case OCTAL:
			case HEXADECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1427; integer();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1428; pfloat();
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1429; pchar();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1430; pstring();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialContext : ParserRuleContext {
		public ITerminalNode OpenRoundBracket() { return GetToken(HaskellParser.OpenRoundBracket, 0); }
		public ITerminalNode CloseRoundBracket() { return GetToken(HaskellParser.CloseRoundBracket, 0); }
		public ITerminalNode Comma() { return GetToken(HaskellParser.Comma, 0); }
		public ITerminalNode Semi() { return GetToken(HaskellParser.Semi, 0); }
		public ITerminalNode OpenSquareBracket() { return GetToken(HaskellParser.OpenSquareBracket, 0); }
		public ITerminalNode CloseSquareBracket() { return GetToken(HaskellParser.CloseSquareBracket, 0); }
		public ITerminalNode BackQuote() { return GetToken(HaskellParser.BackQuote, 0); }
		public ITerminalNode OCURLY() { return GetToken(HaskellParser.OCURLY, 0); }
		public ITerminalNode CCURLY() { return GetToken(HaskellParser.CCURLY, 0); }
		public SpecialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_special; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSpecial(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSpecial(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialContext special() {
		SpecialContext _localctx = new SpecialContext(Context, State);
		EnterRule(_localctx, 174, RULE_special);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1433;
			_la = TokenStream.LA(1);
			if ( !(_la==OCURLY || _la==CCURLY || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (Semi - 69)) | (1L << (OpenRoundBracket - 69)) | (1L << (CloseRoundBracket - 69)) | (1L << (OpenSquareBracket - 69)) | (1L << (CloseSquareBracket - 69)) | (1L << (Comma - 69)) | (1L << (BackQuote - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridContext : ParserRuleContext {
		public ITerminalNode VARID() { return GetToken(HaskellParser.VARID, 0); }
		public ITerminalNode AS() { return GetToken(HaskellParser.AS, 0); }
		public ITerminalNode HIDING() { return GetToken(HaskellParser.HIDING, 0); }
		public ITerminalNode[] Hash() { return GetTokens(HaskellParser.Hash); }
		public ITerminalNode Hash(int i) {
			return GetToken(HaskellParser.Hash, i);
		}
		public VaridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterVarid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitVarid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VaridContext varid() {
		VaridContext _localctx = new VaridContext(Context, State);
		EnterRule(_localctx, 176, RULE_varid);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1435;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 36)) & ~0x3f) == 0 && ((1L << (_la - 36)) & ((1L << (AS - 36)) | (1L << (HIDING - 36)) | (1L << (VARID - 36)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1439;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1436; Match(Hash);
					}
					} 
				}
				State = 1441;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,176,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConidContext : ParserRuleContext {
		public ITerminalNode CONID() { return GetToken(HaskellParser.CONID, 0); }
		public ITerminalNode[] Hash() { return GetTokens(HaskellParser.Hash); }
		public ITerminalNode Hash(int i) {
			return GetToken(HaskellParser.Hash, i);
		}
		public ConidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterConid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitConid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConidContext conid() {
		ConidContext _localctx = new ConidContext(Context, State);
		EnterRule(_localctx, 178, RULE_conid);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442; Match(CONID);
			State = 1446;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1443; Match(Hash);
					}
					} 
				}
				State = 1448;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public AscSymbolContext ascSymbol() {
			return GetRuleContext<AscSymbolContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 180, RULE_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1449; ascSymbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscSymbolContext : ParserRuleContext {
		public ITerminalNode Bang() { return GetToken(HaskellParser.Bang, 0); }
		public ITerminalNode Hash() { return GetToken(HaskellParser.Hash, 0); }
		public ITerminalNode Dollar() { return GetToken(HaskellParser.Dollar, 0); }
		public ITerminalNode Percent() { return GetToken(HaskellParser.Percent, 0); }
		public ITerminalNode Ampersand() { return GetToken(HaskellParser.Ampersand, 0); }
		public ITerminalNode Asterisk() { return GetToken(HaskellParser.Asterisk, 0); }
		public ITerminalNode Plus() { return GetToken(HaskellParser.Plus, 0); }
		public ITerminalNode Dot() { return GetToken(HaskellParser.Dot, 0); }
		public ITerminalNode Divide() { return GetToken(HaskellParser.Divide, 0); }
		public ITerminalNode Less() { return GetToken(HaskellParser.Less, 0); }
		public ITerminalNode Eq() { return GetToken(HaskellParser.Eq, 0); }
		public ITerminalNode Greater() { return GetToken(HaskellParser.Greater, 0); }
		public ITerminalNode QuestionMark() { return GetToken(HaskellParser.QuestionMark, 0); }
		public ITerminalNode Atsign() { return GetToken(HaskellParser.Atsign, 0); }
		public ITerminalNode DoubleQuote() { return GetToken(HaskellParser.DoubleQuote, 0); }
		public ITerminalNode Caret() { return GetToken(HaskellParser.Caret, 0); }
		public ITerminalNode Pipe() { return GetToken(HaskellParser.Pipe, 0); }
		public ITerminalNode Minus() { return GetToken(HaskellParser.Minus, 0); }
		public ITerminalNode Tilde() { return GetToken(HaskellParser.Tilde, 0); }
		public ITerminalNode Colon() { return GetToken(HaskellParser.Colon, 0); }
		public AscSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascSymbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterAscSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitAscSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscSymbolContext ascSymbol() {
		AscSymbolContext _localctx = new AscSymbolContext(Context, State);
		EnterRule(_localctx, 182, RULE_ascSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (Hash - 53)) | (1L << (Less - 53)) | (1L << (Greater - 53)) | (1L << (Ampersand - 53)) | (1L << (Pipe - 53)) | (1L << (Bang - 53)) | (1L << (Caret - 53)) | (1L << (Plus - 53)) | (1L << (Minus - 53)) | (1L << (Asterisk - 53)) | (1L << (Percent - 53)) | (1L << (Divide - 53)) | (1L << (Tilde - 53)) | (1L << (Atsign - 53)) | (1L << (Dollar - 53)) | (1L << (Dot - 53)) | (1L << (QuestionMark - 53)) | (1L << (Colon - 53)) | (1L << (Eq - 53)) | (1L << (DoubleQuote - 53)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsymContext : ParserRuleContext {
		public AscSymbolContext[] ascSymbol() {
			return GetRuleContexts<AscSymbolContext>();
		}
		public AscSymbolContext ascSymbol(int i) {
			return GetRuleContext<AscSymbolContext>(i);
		}
		public VarsymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varsym; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterVarsym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitVarsym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarsym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsymContext varsym() {
		VarsymContext _localctx = new VarsymContext(Context, State);
		EnterRule(_localctx, 184, RULE_varsym);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1454;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1453; ascSymbol();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsymContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(HaskellParser.Colon, 0); }
		public AscSymbolContext[] ascSymbol() {
			return GetRuleContexts<AscSymbolContext>();
		}
		public AscSymbolContext ascSymbol(int i) {
			return GetRuleContext<AscSymbolContext>(i);
		}
		public ConsymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consym; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterConsym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitConsym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConsymContext consym() {
		ConsymContext _localctx = new ConsymContext(Context, State);
		EnterRule(_localctx, 186, RULE_consym);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458; Match(Colon);
			State = 1462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1459; ascSymbol();
					}
					} 
				}
				State = 1464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyvarContext : ParserRuleContext {
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public TyvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tyvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterTyvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitTyvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyvarContext tyvar() {
		TyvarContext _localctx = new TyvarContext(Context, State);
		EnterRule(_localctx, 188, RULE_tyvar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465; varid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyconContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public TyconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tycon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterTycon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitTycon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTycon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyconContext tycon() {
		TyconContext _localctx = new TyconContext(Context, State);
		EnterRule(_localctx, 190, RULE_tycon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1467; conid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyclsContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public TyclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tycls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterTycls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitTycls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTycls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyclsContext tycls() {
		TyclsContext _localctx = new TyclsContext(Context, State);
		EnterRule(_localctx, 192, RULE_tycls);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1469; conid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModidContext : ParserRuleContext {
		public ConidContext[] conid() {
			return GetRuleContexts<ConidContext>();
		}
		public ConidContext conid(int i) {
			return GetRuleContext<ConidContext>(i);
		}
		public ITerminalNode[] Dot() { return GetTokens(HaskellParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(HaskellParser.Dot, i);
		}
		public ModidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterModid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitModid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModidContext modid() {
		ModidContext _localctx = new ModidContext(Context, State);
		EnterRule(_localctx, 194, RULE_modid);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1471; conid();
					State = 1472; Match(Dot);
					}
					} 
				}
				State = 1478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,180,Context);
			}
			State = 1479; conid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QvaridContext : ParserRuleContext {
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(HaskellParser.Dot, 0); }
		public QvaridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qvarid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQvarid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQvarid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQvarid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QvaridContext qvarid() {
		QvaridContext _localctx = new QvaridContext(Context, State);
		EnterRule(_localctx, 196, RULE_qvarid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONID) {
				{
				State = 1481; modid();
				State = 1482; Match(Dot);
				}
			}

			State = 1486; varid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QconidContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(HaskellParser.Dot, 0); }
		public QconidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qconid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQconid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQconid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQconid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QconidContext qconid() {
		QconidContext _localctx = new QconidContext(Context, State);
		EnterRule(_localctx, 198, RULE_qconid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1488; modid();
				State = 1489; Match(Dot);
				}
				break;
			}
			State = 1493; conid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QtyconContext : ParserRuleContext {
		public TyconContext tycon() {
			return GetRuleContext<TyconContext>(0);
		}
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(HaskellParser.Dot, 0); }
		public QtyconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qtycon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQtycon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQtycon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQtycon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QtyconContext qtycon() {
		QtyconContext _localctx = new QtyconContext(Context, State);
		EnterRule(_localctx, 200, RULE_qtycon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				{
				State = 1495; modid();
				State = 1496; Match(Dot);
				}
				break;
			}
			State = 1500; tycon();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QtyclsContext : ParserRuleContext {
		public TyclsContext tycls() {
			return GetRuleContext<TyclsContext>(0);
		}
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(HaskellParser.Dot, 0); }
		public QtyclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qtycls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQtycls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQtycls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQtycls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QtyclsContext qtycls() {
		QtyclsContext _localctx = new QtyclsContext(Context, State);
		EnterRule(_localctx, 202, RULE_qtycls);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				State = 1502; modid();
				State = 1503; Match(Dot);
				}
				break;
			}
			State = 1507; tycls();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QvarsymContext : ParserRuleContext {
		public VarsymContext varsym() {
			return GetRuleContext<VarsymContext>(0);
		}
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(HaskellParser.Dot, 0); }
		public QvarsymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qvarsym; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQvarsym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQvarsym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQvarsym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QvarsymContext qvarsym() {
		QvarsymContext _localctx = new QvarsymContext(Context, State);
		EnterRule(_localctx, 204, RULE_qvarsym);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONID) {
				{
				State = 1509; modid();
				State = 1510; Match(Dot);
				}
			}

			State = 1514; varsym();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QconsymContext : ParserRuleContext {
		public ConsymContext consym() {
			return GetRuleContext<ConsymContext>(0);
		}
		public ModidContext modid() {
			return GetRuleContext<ModidContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(HaskellParser.Dot, 0); }
		public QconsymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qconsym; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterQconsym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitQconsym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQconsym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QconsymContext qconsym() {
		QconsymContext _localctx = new QconsymContext(Context, State);
		EnterRule(_localctx, 206, RULE_qconsym);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONID) {
				{
				State = 1516; modid();
				State = 1517; Match(Dot);
				}
			}

			State = 1521; consym();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(HaskellParser.DECIMAL, 0); }
		public ITerminalNode OCTAL() { return GetToken(HaskellParser.OCTAL, 0); }
		public ITerminalNode HEXADECIMAL() { return GetToken(HaskellParser.HEXADECIMAL, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 208, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1523;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (DECIMAL - 88)) | (1L << (OCTAL - 88)) | (1L << (HEXADECIMAL - 88)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PfloatContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(HaskellParser.FLOAT, 0); }
		public PfloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pfloat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterPfloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitPfloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPfloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PfloatContext pfloat() {
		PfloatContext _localctx = new PfloatContext(Context, State);
		EnterRule(_localctx, 210, RULE_pfloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcharContext : ParserRuleContext {
		public ITerminalNode CHAR() { return GetToken(HaskellParser.CHAR, 0); }
		public PcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pchar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterPchar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitPchar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPchar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PcharContext pchar() {
		PcharContext _localctx = new PcharContext(Context, State);
		EnterRule(_localctx, 212, RULE_pchar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1527; Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PstringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(HaskellParser.STRING, 0); }
		public PstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.EnterPstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaskellParserListener typedListener = listener as IHaskellParserListener;
			if (typedListener != null) typedListener.ExitPstring(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaskellParserVisitor<TResult> typedVisitor = visitor as IHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PstringContext pstring() {
		PstringContext _localctx = new PstringContext(Context, State);
		EnterRule(_localctx, 214, RULE_pstring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1529; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '`', '\x5FE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x3', '\x2', '\a', '\x2', '\xDC', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xDF', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', '\xE2', 
		'\n', '\x2', '\x3', '\x2', '\a', '\x2', '\xE5', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xE8', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\xED', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xF4', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\xF7', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\xFA', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x6', 
		'\x3', '\xFF', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x100', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x108', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x10B', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x116', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', 
		'\x11B', '\n', '\a', '\r', '\a', '\xE', '\a', '\x11C', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x123', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x126', '\v', '\b', '\x5', '\b', '\x128', '\n', '\b', 
		'\x3', '\b', '\x5', '\b', '\x12B', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x138', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x13B', '\v', '\t', '\x5', '\t', '\x13D', 
		'\n', '\t', '\x3', '\t', '\x5', '\t', '\x140', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '\x14A', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\x14D', '\v', '\t', '\x5', '\t', '\x14F', '\n', '\t', '\x3', '\t', 
		'\x5', '\t', '\x152', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x156', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x15A', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x15F', '\n', 
		'\n', '\x3', '\n', '\x5', '\n', '\x162', '\n', '\n', '\x3', '\n', '\x6', 
		'\n', '\x165', '\n', '\n', '\r', '\n', '\xE', '\n', '\x166', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x16D', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\x170', '\v', '\v', '\x3', '\v', '\x5', '\v', 
		'\x173', '\n', '\v', '\x5', '\v', '\x175', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x17D', '\n', '\v', '\f', '\v', '\xE', '\v', '\x180', '\v', '\v', '\x3', 
		'\v', '\x5', '\v', '\x183', '\n', '\v', '\x5', '\v', '\x185', '\n', '\v', 
		'\x3', '\v', '\x5', '\v', '\x188', '\n', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', '\x193', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\x196', '\v', '\f', '\x5', '\f', '\x198', '\n', '\f', '\x3', '\f', 
		'\x5', '\f', '\x19B', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\x1A5', '\n', '\f', '\f', '\f', '\xE', '\f', '\x1A8', '\v', '\f', 
		'\x5', '\f', '\x1AA', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x1AD', '\n', 
		'\f', '\x5', '\f', '\x1AF', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x1B3', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\x1B7', 
		'\n', '\xE', '\r', '\xE', '\xE', '\xE', '\x1B8', '\x3', '\xE', '\x3', 
		'\xE', '\x6', '\xE', '\x1BD', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 
		'\x1BE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x1CA', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x1CF', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1D2', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x1D8', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x1DE', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1E4', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x1EA', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x1F0', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1F6', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\x1FD', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x200', '\v', '\xF', 
		'\x5', '\xF', '\x202', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x208', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\x20D', '\n', '\x10', '\r', 
		'\x10', '\xE', '\x10', '\x20E', '\a', '\x10', '\x211', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x214', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', '\x218', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x21B', 
		'\v', '\x10', '\x5', '\x10', '\x21D', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x233', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', 
		'\x238', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x239', '\x5', '\x11', 
		'\x23C', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x241', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x244', '\v', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x6', '\x14', '\x24D', '\n', '\x14', 
		'\r', '\x14', '\xE', '\x14', '\x24E', '\a', '\x14', '\x251', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x254', '\v', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\a', '\x14', '\x258', '\n', '\x14', '\f', '\x14', '\xE', '\x14', 
		'\x25B', '\v', '\x14', '\x5', '\x14', '\x25D', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x264', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x268', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x6', '\x16', 
		'\x26D', '\n', '\x16', '\r', '\x16', '\xE', '\x16', '\x26E', '\a', '\x16', 
		'\x271', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x274', '\v', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x278', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x27B', '\v', '\x16', '\x5', '\x16', '\x27D', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x283', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x28C', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x292', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x296', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\a', '\x19', '\x29B', '\n', '\x19', '\f', '\x19', '\xE', 
		'\x19', '\x29E', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\a', '\x1A', '\x2A3', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x2A6', 
		'\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x2AD', '\n', '\x1C', '\x3', '\x1D', '\x6', 
		'\x1D', '\x2B0', '\n', '\x1D', '\r', '\x1D', '\xE', '\x1D', '\x2B1', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\a', '\x1E', '\x2BA', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', 
		'\x2BD', '\v', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x2C9', '\n', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x2D9', '\n', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', 
		' ', '\x2E0', '\n', ' ', '\f', ' ', '\xE', ' ', '\x2E3', '\v', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x2E7', '\n', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\a', '!', '\x2F2', '\n', '!', '\f', '!', '\xE', '!', '\x2F5', 
		'\v', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x2F9', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', 
		'\x300', '\n', '\"', '\f', '\"', '\xE', '\"', '\x303', '\v', '\"', '\x5', 
		'\"', '\x305', '\n', '\"', '\x3', '\"', '\x5', '\"', '\x308', '\n', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\a', '$', 
		'\x30F', '\n', '$', '\f', '$', '\xE', '$', '\x312', '\v', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\a', '%', '\x317', '\n', '%', '\f', '%', 
		'\xE', '%', '\x31A', '\v', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x31E', 
		'\n', '&', '\x3', '&', '\a', '&', '\x321', '\n', '&', '\f', '&', '\xE', 
		'&', '\x324', '\v', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\x329', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', 
		'&', '\x32F', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\a', '&', '\x336', '\n', '&', '\f', '&', '\xE', '&', '\x339', 
		'\v', '&', '\x5', '&', '\x33B', '\n', '&', '\x3', '&', '\x3', '&', '\x5', 
		'&', '\x33F', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x34B', '\n', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x352', '\n', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', 
		')', '\x35A', '\n', ')', '\f', ')', '\xE', ')', '\x35D', '\v', ')', '\x5', 
		')', '\x35F', '\n', ')', '\x3', ')', '\x5', ')', '\x362', '\n', ')', '\x3', 
		'*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', 
		'+', '\x36A', '\n', '+', '\f', '+', '\xE', '+', '\x36D', '\v', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x374', 
		'\n', '+', '\f', '+', '\xE', '+', '\x377', '\v', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\a', '+', '\x381', '\n', '+', '\f', '+', '\xE', '+', '\x384', '\v', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x392', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x397', '\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x5', ',', '\x3A5', '\n', ',', '\x3', '-', 
		'\x3', '-', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x6', '\x31', '\x3B1', '\n', 
		'\x31', '\r', '\x31', '\xE', '\x31', '\x3B2', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x6', '\x31', '\x3BD', '\n', '\x31', '\r', '\x31', '\xE', 
		'\x31', '\x3BE', '\x5', '\x31', '\x3C1', '\n', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x3C7', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x3CC', 
		'\n', '\x32', '\x5', '\x32', '\x3CE', '\n', '\x32', '\x3', '\x33', '\x6', 
		'\x33', '\x3D1', '\n', '\x33', '\r', '\x33', '\xE', '\x33', '\x3D2', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x3DD', '\n', '\x35', 
		'\f', '\x35', '\xE', '\x35', '\x3E0', '\v', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x3E9', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x3F0', '\n', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x3F5', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x3FE', '\n', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x6', '\x39', '\x402', '\n', '\x39', 
		'\r', '\x39', '\xE', '\x39', '\x403', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x411', 
		'\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x416', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x425', '\n', '\x39', '\x3', ':', '\x6', ':', '\x428', '\n', 
		':', '\r', ':', '\xE', ':', '\x429', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', '\x439', '\n', 
		';', '\f', ';', '\xE', ';', '\x43C', '\v', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', '\x444', '\n', 
		';', '\f', ';', '\xE', ';', '\x447', '\v', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x44F', '\n', 
		';', '\x3', ';', '\x3', ';', '\x5', ';', '\x453', '\n', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\a', ';', '\x45D', '\n', ';', '\f', ';', '\xE', ';', '\x460', 
		'\v', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x474', '\n', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', '\x47C', '\n', ';', 
		'\f', ';', '\xE', ';', '\x47F', '\v', ';', '\x3', ';', '\x3', ';', '\x6', 
		';', '\x483', '\n', ';', '\r', ';', '\xE', ';', '\x484', '\x5', ';', '\x487', 
		'\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x5', '<', '\x490', '\n', '<', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x6', '=', '\x495', '\n', '=', '\r', '=', '\xE', '=', 
		'\x496', '\x6', '=', '\x499', '\n', '=', '\r', '=', '\xE', '=', '\x49A', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x5', '>', '\x4A4', '\n', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x5', '>', '\x4AA', '\n', '>', '\x5', '>', '\x4AC', 
		'\n', '>', '\x3', '?', '\x6', '?', '\x4AF', '\n', '?', '\r', '?', '\xE', 
		'?', '\x4B0', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x5', '@', '\x4B8', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\a', '\x42', 
		'\x4C1', '\n', '\x42', '\f', '\x42', '\xE', '\x42', '\x4C4', '\v', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\a', '\x42', '\x4C8', '\n', '\x42', '\f', 
		'\x42', '\xE', '\x42', '\x4CB', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x6', '\x43', '\x4D1', '\n', '\x43', '\r', 
		'\x43', '\xE', '\x43', '\x4D2', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x6', '\x43', '\x4D9', '\n', '\x43', '\r', '\x43', '\xE', 
		'\x43', '\x4DA', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x6', '\x43', 
		'\x4E0', '\n', '\x43', '\r', '\x43', '\xE', '\x43', '\x4E1', '\x3', '\x43', 
		'\x6', '\x43', '\x4E5', '\n', '\x43', '\r', '\x43', '\xE', '\x43', '\x4E6', 
		'\x5', '\x43', '\x4E9', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x4F4', '\n', '\x45', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x4FA', '\n', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x6', '\x46', '\x4FE', '\n', '\x46', 
		'\r', '\x46', '\xE', '\x46', '\x4FF', '\x5', '\x46', '\x502', '\n', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x507', '\n', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 
		'G', '\x50F', '\n', 'G', '\f', 'G', '\xE', 'G', '\x512', '\v', 'G', '\x5', 
		'G', '\x514', '\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x524', '\n', 
		'G', '\f', 'G', '\xE', 'G', '\x527', '\v', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x52F', '\n', 
		'G', '\f', 'G', '\xE', 'G', '\x532', '\v', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x5', 'G', '\x538', '\n', 'G', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x6', 'I', '\x544', '\n', 'I', '\r', 'I', 
		'\xE', 'I', '\x545', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x54A', '\n', 
		'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 
		'J', '\x551', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x5', 'K', '\x558', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x55F', '\n', 'L', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x566', '\n', 
		'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 
		'N', '\x56D', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x5', 'O', '\x574', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x57B', '\n', 'P', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x582', '\n', 
		'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x586', '\n', 'R', '\x3', 'S', 
		'\x3', 'S', '\x5', 'S', '\x58A', '\n', 'S', '\x3', 'T', '\x3', 'T', '\x5', 
		'T', '\x58E', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', 
		'\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x5', 'X', '\x59A', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\a', 'Z', '\x5A0', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\x5A3', '\v', 
		'Z', '\x3', '[', '\x3', '[', '\a', '[', '\x5A7', '\n', '[', '\f', '[', 
		'\xE', '[', '\x5AA', '\v', '[', '\x3', '\\', '\x3', '\\', '\x3', ']', 
		'\x3', ']', '\x3', '^', '\x6', '^', '\x5B1', '\n', '^', '\r', '^', '\xE', 
		'^', '\x5B2', '\x3', '_', '\x3', '_', '\a', '_', '\x5B7', '\n', '_', '\f', 
		'_', '\xE', '_', '\x5BA', '\v', '_', '\x3', '`', '\x3', '`', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', '\x63', 
		'\x3', '\x63', '\a', '\x63', '\x5C5', '\n', '\x63', '\f', '\x63', '\xE', 
		'\x63', '\x5C8', '\v', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x5CF', '\n', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', 
		'\x65', '\x5D6', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\x5DD', '\n', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g', 
		'\x5E4', '\n', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', '\x3', 
		'h', '\x5', 'h', '\x5EB', '\n', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\x5', 'i', '\x5F2', '\n', 'i', '\x3', 'i', '\x3', 
		'i', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 
		'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x2', '\x2', 'n', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', 
		'\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', 
		'\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', 
		'\x2', '\f', '\x3', '\x2', '\x19', '\x1A', '\x3', '\x2', ',', '\x30', 
		'\x3', '\x2', '\x31', '\x32', '\x4', '\x2', '\b', '\b', '\n', '\n', '\x4', 
		'\x2', '\t', '\t', '\v', '\v', '\x4', '\x2', '\f', '\f', 'G', 'G', '\a', 
		'\x2', '\b', '\t', 'G', 'G', 'J', 'M', 'P', 'P', 'U', 'U', '\x4', '\x2', 
		'&', '\'', 'X', 'X', '\x6', '\x2', '\x37', '\x46', 'I', 'I', 'Q', 'R', 
		'T', 'T', '\x3', '\x2', 'Z', '\\', '\x2', '\x68C', '\x2', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\b', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x115', '\x3', '\x2', '\x2', '\x2', '\f', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x12', '\x157', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x187', '\x3', '\x2', '\x2', '\x2', '\x16', '\x1AE', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x209', '\x3', '\x2', '\x2', '\x2', ' ', '\x23B', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x23D', '\x3', '\x2', '\x2', '\x2', '$', '\x245', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x249', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x267', '\x3', '\x2', '\x2', '\x2', '*', '\x269', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x282', '\x3', '\x2', '\x2', '\x2', '.', '\x295', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x34', '\x2A7', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x38', '\x2AF', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x2C8', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x2D8', '\x3', '\x2', '\x2', '\x2', '>', '\x2E6', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x42', '\x307', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x30C', '\x3', '\x2', '\x2', '\x2', 'H', '\x313', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x33E', '\x3', '\x2', '\x2', '\x2', 'L', '\x34A', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x34C', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x353', '\x3', '\x2', '\x2', '\x2', 'R', '\x363', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x391', '\x3', '\x2', '\x2', '\x2', 'V', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\\', '\x3AA', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x3AC', '\x3', '\x2', '\x2', '\x2', '`', '\x3C0', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x3CD', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x66', '\x3D4', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x3D9', '\x3', '\x2', '\x2', '\x2', 'j', '\x3E8', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x3F4', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x3FD', '\x3', '\x2', '\x2', '\x2', 'p', '\x424', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x427', '\x3', '\x2', '\x2', '\x2', 't', '\x486', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x48F', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x491', '\x3', '\x2', '\x2', '\x2', 'z', '\x4AB', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x4AE', '\x3', '\x2', '\x2', '\x2', '~', '\x4B7', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x4B9', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x84', '\x4E8', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x88', '\x4F3', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x501', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x537', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x539', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x549', '\x3', '\x2', '\x2', '\x2', '\x92', '\x550', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x557', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x98', '\x565', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x573', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x57A', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x581', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x585', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x589', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x58D', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x58F', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x591', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x593', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x599', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x59B', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x59D', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x5A4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x5AB', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x5B0', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x5B4', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x5BB', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x5BD', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x5C6', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x5CE', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x5D5', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x5DC', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x5EA', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x5F1', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x5F5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x5F7', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x5FB', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', '\x5', '\xAC', 'W', '\x2', 
		'\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', '\x4', 
		'\x3', '\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE5', '\x5', '\xAC', 'W', '\x2', '\xE4', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\a', '\x1E', '\x2', '\x2', '\xEA', '\xEC', 
		'\x5', '\xC4', '\x63', '\x2', '\xEB', '\xED', '\x5', '\xE', '\b', '\x2', 
		'\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\a', '#', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\xA8', 'U', '\x2', '\xF0', 
		'\xF1', '\x5', '\n', '\x6', '\x2', '\xF1', '\xF5', '\x5', '\xAA', 'V', 
		'\x2', '\xF2', '\xF4', '\x5', '\xAC', 'W', '\x2', '\xF3', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFA', '\x5', '\n', '\x6', '\x2', '\xF9', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', 
		'\x2', '\x2', '\x3', '\xFC', '\x3', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFF', '\x5', '\x6', '\x4', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', 'N', '\x2', 
		'\x2', '\x103', '\x104', '\a', '(', '\x2', '\x2', '\x104', '\x109', '\x5', 
		'\b', '\x5', '\x2', '\x105', '\x106', '\a', 'P', '\x2', '\x2', '\x106', 
		'\x108', '\x5', '\b', '\x5', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', 'O', '\x2', '\x2', '\x10D', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\xB4', '[', 
		'\x2', '\x10F', '\t', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x5', 
		'\f', '\a', '\x2', '\x111', '\x112', '\x5', '\x1A', '\xE', '\x2', '\x112', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x113', '\x116', '\x5', '\f', '\a', 
		'\x2', '\x114', '\x116', '\x5', '\x1A', '\xE', '\x2', '\x115', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x114', '\x3', '\x2', '\x2', '\x2', '\x116', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x117', '\x11B', '\x5', '\x12', '\n', '\x2', '\x118', '\x11B', 
		'\a', '\x3', '\x2', '\x2', '\x119', '\x11B', '\x5', '\xAC', 'W', '\x2', 
		'\x11A', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x127', '\a', 'J', '\x2', '\x2', '\x11F', 
		'\x124', '\x5', '\x10', '\t', '\x2', '\x120', '\x121', '\a', 'P', '\x2', 
		'\x2', '\x121', '\x123', '\x5', '\x10', '\t', '\x2', '\x122', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x128', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x127', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12B', '\a', 'P', '\x2', '\x2', 
		'\x12A', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12D', '\a', 'K', '\x2', '\x2', '\x12D', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x156', '\x5', '\x94', 'K', '\x2', '\x12F', '\x13F', 
		'\x5', '\xCA', '\x66', '\x2', '\x130', '\x131', '\a', 'J', '\x2', '\x2', 
		'\x131', '\x132', '\a', 'H', '\x2', '\x2', '\x132', '\x140', '\a', 'K', 
		'\x2', '\x2', '\x133', '\x13C', '\a', 'J', '\x2', '\x2', '\x134', '\x139', 
		'\x5', '\x18', '\r', '\x2', '\x135', '\x136', '\a', 'P', '\x2', '\x2', 
		'\x136', '\x138', '\x5', '\x18', '\r', '\x2', '\x137', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x140', '\a', 'K', '\x2', '\x2', '\x13F', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x151', '\x5', '\xCC', 'g', '\x2', 
		'\x142', '\x143', '\a', 'J', '\x2', '\x2', '\x143', '\x144', '\a', 'H', 
		'\x2', '\x2', '\x144', '\x152', '\a', 'K', '\x2', '\x2', '\x145', '\x14E', 
		'\a', 'J', '\x2', '\x2', '\x146', '\x14B', '\x5', '\x94', 'K', '\x2', 
		'\x147', '\x148', '\a', 'P', '\x2', '\x2', '\x148', '\x14A', '\x5', '\x94', 
		'K', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', '\x152', 
		'\a', 'K', '\x2', '\x2', '\x151', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x145', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x156', '\x3', '\x2', '\x2', '\x2', '\x153', 
		'\x154', '\a', '\x1E', '\x2', '\x2', '\x154', '\x156', '\x5', '\xC4', 
		'\x63', '\x2', '\x155', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x155', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x156', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x159', '\a', '\x17', '\x2', '\x2', 
		'\x158', '\x15A', '\a', '%', '\x2', '\x2', '\x159', '\x158', '\x3', '\x2', 
		'\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', 
		'\x3', '\x2', '\x2', '\x2', '\x15B', '\x15E', '\x5', '\xC4', '\x63', '\x2', 
		'\x15C', '\x15D', '\a', '&', '\x2', '\x2', '\x15D', '\x15F', '\x5', '\xC4', 
		'\x63', '\x2', '\x15E', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x162', '\x5', '\x14', '\v', '\x2', '\x161', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x164', '\x3', '\x2', '\x2', '\x2', '\x163', '\x165', '\x5', 
		'\xAC', 'W', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x167', '\x3', '\x2', '\x2', '\x2', '\x167', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x174', '\a', 'J', '\x2', '\x2', 
		'\x169', '\x16E', '\x5', '\x16', '\f', '\x2', '\x16A', '\x16B', '\a', 
		'P', '\x2', '\x2', '\x16B', '\x16D', '\x5', '\x16', '\f', '\x2', '\x16C', 
		'\x16A', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x171', '\x173', '\a', 
		'P', '\x2', '\x2', '\x172', '\x171', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x173', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x169', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x188', '\a', 'K', '\x2', '\x2', '\x177', '\x178', '\a', '\'', 
		'\x2', '\x2', '\x178', '\x184', '\a', 'J', '\x2', '\x2', '\x179', '\x17E', 
		'\x5', '\x16', '\f', '\x2', '\x17A', '\x17B', '\a', 'P', '\x2', '\x2', 
		'\x17B', '\x17D', '\x5', '\x16', '\f', '\x2', '\x17C', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x182', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x183', '\a', 'P', '\x2', '\x2', 
		'\x182', '\x181', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x185', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', '\x188', 
		'\a', 'K', '\x2', '\x2', '\x187', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x177', '\x3', '\x2', '\x2', '\x2', '\x188', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x1AF', '\x5', '\x92', 'J', '\x2', '\x18A', 
		'\x19A', '\x5', '\xC0', '\x61', '\x2', '\x18B', '\x18C', '\a', 'J', '\x2', 
		'\x2', '\x18C', '\x18D', '\a', 'H', '\x2', '\x2', '\x18D', '\x19B', '\a', 
		'K', '\x2', '\x2', '\x18E', '\x197', '\a', 'J', '\x2', '\x2', '\x18F', 
		'\x194', '\x5', '\x18', '\r', '\x2', '\x190', '\x191', '\a', 'P', '\x2', 
		'\x2', '\x191', '\x193', '\x5', '\x18', '\r', '\x2', '\x192', '\x190', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x196', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x198', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x197', '\x18F', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19B', '\a', 'K', '\x2', '\x2', 
		'\x19A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x1AC', '\x5', '\xC2', 
		'\x62', '\x2', '\x19D', '\x19E', '\a', 'J', '\x2', '\x2', '\x19E', '\x19F', 
		'\a', 'H', '\x2', '\x2', '\x19F', '\x1AD', '\a', 'K', '\x2', '\x2', '\x1A0', 
		'\x1A9', '\a', 'J', '\x2', '\x2', '\x1A1', '\x1A6', '\x5', '\x92', 'J', 
		'\x2', '\x1A2', '\x1A3', '\a', 'P', '\x2', '\x2', '\x1A3', '\x1A5', '\x5', 
		'\x92', 'J', '\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1AD', '\a', 'K', '\x2', '\x2', '\x1AC', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x189', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B3', '\x5', '\x92', 'J', 
		'\x2', '\x1B1', '\x1B3', '\x5', '\x96', 'L', '\x2', '\x1B2', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B6', '\x5', 
		'\x1C', '\xF', '\x2', '\x1B5', '\x1B7', '\x5', '\xAC', 'W', '\x2', '\x1B6', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1BD', '\a', '\x3', '\x2', '\x2', '\x1BB', '\x1BD', '\x5', 
		'\xAC', 'W', '\x2', '\x1BC', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\"', 
		'\x2', '\x2', '\x1C1', '\x1C2', '\x5', '\x46', '$', '\x2', '\x1C2', '\x1C3', 
		'\a', 'R', '\x2', '\x2', '\x1C3', '\x1C4', '\x5', '\x36', '\x1C', '\x2', 
		'\x1C4', '\x208', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C9', '\a', 
		'\xF', '\x2', '\x2', '\x1C6', '\x1C7', '\x5', '>', ' ', '\x2', '\x1C7', 
		'\x1C8', '\a', '\x33', '\x2', '\x2', '\x1C8', '\x1CA', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1CE', '\x5', '\x46', '$', '\x2', '\x1CC', '\x1CD', '\a', 'R', 
		'\x2', '\x2', '\x1CD', '\x1CF', '\x5', 'H', '%', '\x2', '\x1CE', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D2', '\x5', 
		'P', ')', '\x2', '\x1D1', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x208', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x1D7', '\a', '\x1F', '\x2', '\x2', '\x1D4', '\x1D5', 
		'\x5', '>', ' ', '\x2', '\x1D5', '\x1D6', '\a', '\x33', '\x2', '\x2', 
		'\x1D6', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D8', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x5', '\x46', 
		'$', '\x2', '\x1DA', '\x1DB', '\a', 'R', '\x2', '\x2', '\x1DB', '\x1DD', 
		'\x5', 'L', '\'', '\x2', '\x1DC', '\x1DE', '\x5', 'P', ')', '\x2', '\x1DD', 
		'\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x208', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E3', 
		'\a', '\xE', '\x2', '\x2', '\x1E0', '\x1E1', '\x5', '\x42', '\"', '\x2', 
		'\x1E1', '\x1E2', '\a', '\x33', '\x2', '\x2', '\x1E2', '\x1E4', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E3', 
		'\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E5', '\x1E6', '\x5', '\xC2', '\x62', '\x2', '\x1E6', '\x1E9', 
		'\x5', '\xBE', '`', '\x2', '\x1E7', '\x1E8', '\a', '#', '\x2', '\x2', 
		'\x1E8', '\x1EA', '\x5', '&', '\x14', '\x2', '\x1E9', '\x1E7', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EF', '\a', '\x1C', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\x5', '\x42', '\"', '\x2', '\x1ED', '\x1EE', 
		'\a', '\x33', '\x2', '\x2', '\x1EE', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1EF', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1F2', '\x5', '\xCC', 'g', '\x2', '\x1F2', '\x1F5', '\x5', 'T', '+', 
		'\x2', '\x1F3', '\x1F4', '\a', '#', '\x2', '\x2', '\x1F4', '\x1F6', '\x5', 
		'*', '\x16', '\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F5', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x208', '\x3', '\x2', '\x2', 
		'\x2', '\x1F7', '\x1F8', '\a', '\x10', '\x2', '\x2', '\x1F8', '\x201', 
		'\a', 'J', '\x2', '\x2', '\x1F9', '\x1FE', '\x5', '\x36', '\x1C', '\x2', 
		'\x1FA', '\x1FB', '\a', 'P', '\x2', '\x2', '\x1FB', '\x1FD', '\x5', '\x36', 
		'\x1C', '\x2', '\x1FC', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x202', 
		'\x3', '\x2', '\x2', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', 
		'\x201', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\x3', 
		'\x2', '\x2', '\x2', '\x202', '\x203', '\x3', '\x2', '\x2', '\x2', '\x203', 
		'\x208', '\a', 'K', '\x2', '\x2', '\x204', '\x205', '\a', '\x15', '\x2', 
		'\x2', '\x205', '\x208', '\x5', 'V', ',', '\x2', '\x206', '\x208', '\x5', 
		' ', '\x11', '\x2', '\x207', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x207', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x207', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', '\x207', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x207', '\x204', '\x3', '\x2', '\x2', '\x2', '\x207', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x209', 
		'\x21C', '\x5', '\xA8', 'U', '\x2', '\x20A', '\x20C', '\x5', ' ', '\x11', 
		'\x2', '\x20B', '\x20D', '\x5', '\xAC', 'W', '\x2', '\x20C', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x211', '\x3', '\x2', '\x2', '\x2', '\x210', 
		'\x20A', '\x3', '\x2', '\x2', '\x2', '\x211', '\x214', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x213', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x215', '\x219', '\x5', 
		' ', '\x11', '\x2', '\x216', '\x218', '\x5', '\xAC', 'W', '\x2', '\x217', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x217', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x21A', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', 
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21F', '\x5', '\xAA', 
		'V', '\x2', '\x21F', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\a', 'N', '\x2', '\x2', '\x221', '\x222', '\a', ')', '\x2', '\x2', '\x222', 
		'\x223', '\x5', '\x94', 'K', '\x2', '\x223', '\x224', '\a', 'O', '\x2', 
		'\x2', '\x224', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', 
		'\a', 'N', '\x2', '\x2', '\x226', '\x227', '\a', '*', '\x2', '\x2', '\x227', 
		'\x228', '\x5', '\x94', 'K', '\x2', '\x228', '\x229', '\a', 'O', '\x2', 
		'\x2', '\x229', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', 
		'\a', 'N', '\x2', '\x2', '\x22B', '\x22C', '\a', '+', '\x2', '\x2', '\x22C', 
		'\x22D', '\x5', '\"', '\x12', '\x2', '\x22D', '\x22E', '\a', 'O', '\x2', 
		'\x2', '\x22E', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x23C', 
		'\x5', '.', '\x18', '\x2', '\x230', '\x233', '\x5', '`', '\x31', '\x2', 
		'\x231', '\x233', '\x5', '\x88', '\x45', '\x2', '\x232', '\x230', '\x3', 
		'\x2', '\x2', '\x2', '\x232', '\x231', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x234', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x5', '\x62', 
		'\x32', '\x2', '\x235', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x238', '\x5', '\xAC', 'W', '\x2', '\x237', '\x236', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x239', '\x3', '\x2', '\x2', '\x2', '\x239', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x220', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x225', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x22A', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x232', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x23C', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x23D', '\x242', '\x5', '$', '\x13', '\x2', '\x23E', '\x23F', '\a', 'P', 
		'\x2', '\x2', '\x23F', '\x241', '\x5', '$', '\x13', '\x2', '\x240', '\x23E', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x240', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x3', 
		'\x2', '\x2', '\x2', '\x243', '#', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x242', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x5', '\x32', 
		'\x1A', '\x2', '\x246', '\x247', '\a', '\x34', '\x2', '\x2', '\x247', 
		'\x248', '\x5', '\x36', '\x1C', '\x2', '\x248', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x249', '\x25C', '\x5', '\xA8', 'U', '\x2', '\x24A', '\x24C', 
		'\x5', '(', '\x15', '\x2', '\x24B', '\x24D', '\x5', '\xAC', 'W', '\x2', 
		'\x24C', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x24E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x251', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x251', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x250', '\x3', '\x2', '\x2', '\x2', 
		'\x252', '\x253', '\x3', '\x2', '\x2', '\x2', '\x253', '\x255', '\x3', 
		'\x2', '\x2', '\x2', '\x254', '\x252', '\x3', '\x2', '\x2', '\x2', '\x255', 
		'\x259', '\x5', '(', '\x15', '\x2', '\x256', '\x258', '\x5', '\xAC', 'W', 
		'\x2', '\x257', '\x256', '\x3', '\x2', '\x2', '\x2', '\x258', '\x25B', 
		'\x3', '\x2', '\x2', '\x2', '\x259', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\x259', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25D', '\x3', 
		'\x2', '\x2', '\x2', '\x25B', '\x259', '\x3', '\x2', '\x2', '\x2', '\x25C', 
		'\x252', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', 
		'\x2', '\x25D', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', 
		'\x5', '\xAA', 'V', '\x2', '\x25F', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x268', '\x5', '.', '\x18', '\x2', '\x261', '\x264', '\x5', 
		'`', '\x31', '\x2', '\x262', '\x264', '\x5', '\x92', 'J', '\x2', '\x263', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x263', '\x262', '\x3', '\x2', '\x2', 
		'\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', 
		'\x5', '\x62', '\x32', '\x2', '\x266', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x267', '\x260', '\x3', '\x2', '\x2', '\x2', '\x267', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x268', ')', '\x3', '\x2', '\x2', '\x2', '\x269', 
		'\x27C', '\x5', '\xA8', 'U', '\x2', '\x26A', '\x26C', '\x5', ',', '\x17', 
		'\x2', '\x26B', '\x26D', '\x5', '\xAC', 'W', '\x2', '\x26C', '\x26B', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\x3', '\x2', '\x2', '\x2', 
		'\x26E', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26F', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x271', '\x3', '\x2', '\x2', '\x2', '\x270', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x271', '\x274', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x270', '\x3', '\x2', '\x2', '\x2', '\x272', '\x273', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x272', '\x3', '\x2', '\x2', '\x2', '\x275', '\x279', '\x5', 
		',', '\x17', '\x2', '\x276', '\x278', '\x5', '\xAC', 'W', '\x2', '\x277', 
		'\x276', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27B', '\x3', '\x2', '\x2', 
		'\x2', '\x279', '\x277', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27D', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x272', '\x3', 
		'\x2', '\x2', '\x2', '\x27C', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27D', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x5', '\xAA', 
		'V', '\x2', '\x27F', '+', '\x3', '\x2', '\x2', '\x2', '\x280', '\x283', 
		'\x5', '`', '\x31', '\x2', '\x281', '\x283', '\x5', '\x92', 'J', '\x2', 
		'\x282', '\x280', '\x3', '\x2', '\x2', '\x2', '\x282', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x284', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\x5', '\x62', '\x32', '\x2', '\x285', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x286', '\x287', '\x5', '\x32', '\x1A', '\x2', '\x287', '\x28B', 
		'\a', '\x34', '\x2', '\x2', '\x288', '\x289', '\x5', '>', ' ', '\x2', 
		'\x289', '\x28A', '\a', '\x33', '\x2', '\x2', '\x28A', '\x28C', '\x3', 
		'\x2', '\x2', '\x2', '\x28B', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28C', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', 
		'\x2', '\x28D', '\x28E', '\x5', '\x36', '\x1C', '\x2', '\x28E', '\x296', 
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x291', '\x5', '\x34', '\x1B', '\x2', 
		'\x290', '\x292', '\a', 'Z', '\x2', '\x2', '\x291', '\x290', '\x3', '\x2', 
		'\x2', '\x2', '\x291', '\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', 
		'\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\x5', '\x30', '\x19', '\x2', 
		'\x294', '\x296', '\x3', '\x2', '\x2', '\x2', '\x295', '\x286', '\x3', 
		'\x2', '\x2', '\x2', '\x295', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x297', '\x29C', '\x5', '\xA2', 'R', 
		'\x2', '\x298', '\x299', '\a', 'P', '\x2', '\x2', '\x299', '\x29B', '\x5', 
		'\xA2', 'R', '\x2', '\x29A', '\x298', '\x3', '\x2', '\x2', '\x2', '\x29B', 
		'\x29E', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', 
		'\x2', '\x29C', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x2A4', '\x5', '\x92', 'J', '\x2', '\x2A0', '\x2A1', '\a', 'P', 
		'\x2', '\x2', '\x2A1', '\x2A3', '\x5', '\x92', 'J', '\x2', '\x2A2', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'\x2A4', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x33', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\t', '\x2', '\x2', 
		'\x2', '\x2A8', '\x35', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AC', 
		'\x5', '\x38', '\x1D', '\x2', '\x2AA', '\x2AB', '\a', '\x35', '\x2', '\x2', 
		'\x2AB', '\x2AD', '\x5', '\x36', '\x1C', '\x2', '\x2AC', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AD', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2B0', '\x5', ':', '\x1E', 
		'\x2', '\x2AF', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B1', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2AF', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x2B3', '\x2C9', '\x5', '<', '\x1F', '\x2', '\x2B4', 
		'\x2C9', '\x5', '\xB2', 'Z', '\x2', '\x2B5', '\x2B6', '\a', 'J', '\x2', 
		'\x2', '\x2B6', '\x2BB', '\x5', '\x36', '\x1C', '\x2', '\x2B7', '\x2B8', 
		'\a', 'P', '\x2', '\x2', '\x2B8', '\x2BA', '\x5', '\x36', '\x1C', '\x2', 
		'\x2B9', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BD', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BB', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BE', '\x3', '\x2', '\x2', 
		'\x2', '\x2BD', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', 
		'\a', 'K', '\x2', '\x2', '\x2BF', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\x2C1', '\a', 'L', '\x2', '\x2', '\x2C1', '\x2C2', '\x5', '\x36', 
		'\x1C', '\x2', '\x2C2', '\x2C3', '\a', 'M', '\x2', '\x2', '\x2C3', '\x2C9', 
		'\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\a', 'J', '\x2', '\x2', 
		'\x2C5', '\x2C6', '\x5', '\x36', '\x1C', '\x2', '\x2C6', '\x2C7', '\a', 
		'K', '\x2', '\x2', '\x2C7', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2B4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C8', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C4', '\x3', '\x2', '\x2', '\x2', 
		'\x2C9', ';', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2D9', '\x5', '\xCA', 
		'\x66', '\x2', '\x2CB', '\x2CC', '\a', 'J', '\x2', '\x2', '\x2CC', '\x2D9', 
		'\a', 'K', '\x2', '\x2', '\x2CD', '\x2CE', '\a', 'L', '\x2', '\x2', '\x2CE', 
		'\x2D9', '\a', 'M', '\x2', '\x2', '\x2CF', '\x2D0', '\a', 'J', '\x2', 
		'\x2', '\x2D0', '\x2D1', '\a', '\x35', '\x2', '\x2', '\x2D1', '\x2D9', 
		'\a', 'K', '\x2', '\x2', '\x2D2', '\x2D3', '\a', 'J', '\x2', '\x2', '\x2D3', 
		'\x2D4', '\a', 'P', '\x2', '\x2', '\x2D4', '\x2D5', '\a', '\b', '\x2', 
		'\x2', '\x2D5', '\x2D6', '\a', 'P', '\x2', '\x2', '\x2D6', '\x2D7', '\a', 
		'\t', '\x2', '\x2', '\x2D7', '\x2D9', '\a', 'K', '\x2', '\x2', '\x2D8', 
		'\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2CB', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2CF', 
		'\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D2', '\x3', '\x2', '\x2', '\x2', 
		'\x2D9', '=', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2E7', '\x5', '@', 
		'!', '\x2', '\x2DB', '\x2DC', '\a', 'J', '\x2', '\x2', '\x2DC', '\x2E1', 
		'\x5', '@', '!', '\x2', '\x2DD', '\x2DE', '\a', 'P', '\x2', '\x2', '\x2DE', 
		'\x2E0', '\x5', '@', '!', '\x2', '\x2DF', '\x2DD', '\x3', '\x2', '\x2', 
		'\x2', '\x2E0', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2DF', 
		'\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', '\x3', '\x2', '\x2', '\x2', 
		'\x2E2', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E1', '\x3', 
		'\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\a', 'K', '\x2', '\x2', '\x2E5', 
		'\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2DA', '\x3', '\x2', '\x2', 
		'\x2', '\x2E6', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2E7', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x2E8', '\x2E9', '\x5', '\xB4', '[', '\x2', '\x2E9', 
		'\x2EA', '\x5', '\xB2', 'Z', '\x2', '\x2EA', '\x2F9', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2EC', '\x5', '\xCC', 'g', '\x2', '\x2EC', '\x2ED', 
		'\a', 'J', '\x2', '\x2', '\x2ED', '\x2EE', '\x5', '\xBE', '`', '\x2', 
		'\x2EE', '\x2F3', '\x5', ':', '\x1E', '\x2', '\x2EF', '\x2F0', '\a', 'P', 
		'\x2', '\x2', '\x2F0', '\x2F2', '\x5', ':', '\x1E', '\x2', '\x2F1', '\x2EF', 
		'\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x2F3', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F4', '\x3', 
		'\x2', '\x2', '\x2', '\x2F4', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F5', 
		'\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F7', '\a', 'K', '\x2', 
		'\x2', '\x2F7', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2EB', '\x3', '\x2', '\x2', '\x2', 
		'\x2F9', '\x41', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x308', '\x5', 
		'\x44', '#', '\x2', '\x2FB', '\x304', '\a', 'J', '\x2', '\x2', '\x2FC', 
		'\x301', '\x5', '\x44', '#', '\x2', '\x2FD', '\x2FE', '\a', 'P', '\x2', 
		'\x2', '\x2FE', '\x300', '\x5', '\x44', '#', '\x2', '\x2FF', '\x2FD', 
		'\x3', '\x2', '\x2', '\x2', '\x300', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x301', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\x3', 
		'\x2', '\x2', '\x2', '\x302', '\x305', '\x3', '\x2', '\x2', '\x2', '\x303', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x304', '\x2FC', '\x3', '\x2', '\x2', 
		'\x2', '\x304', '\x305', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\x306', '\x308', '\a', 'K', '\x2', '\x2', 
		'\x307', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x307', '\x2FB', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x43', '\x3', '\x2', '\x2', '\x2', '\x309', 
		'\x30A', '\x5', '\xCC', 'g', '\x2', '\x30A', '\x30B', '\x5', '\xBE', '`', 
		'\x2', '\x30B', '\x45', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x310', 
		'\x5', '\xC0', '\x61', '\x2', '\x30D', '\x30F', '\x5', '\xBE', '`', '\x2', 
		'\x30E', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x312', '\x3', 
		'\x2', '\x2', '\x2', '\x310', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x311', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x312', '\x310', '\x3', '\x2', '\x2', '\x2', '\x313', '\x318', 
		'\x5', 'J', '&', '\x2', '\x314', '\x315', '\a', ';', '\x2', '\x2', '\x315', 
		'\x317', '\x5', 'J', '&', '\x2', '\x316', '\x314', '\x3', '\x2', '\x2', 
		'\x2', '\x317', '\x31A', '\x3', '\x2', '\x2', '\x2', '\x318', '\x316', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'\x319', 'I', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x318', '\x3', '\x2', 
		'\x2', '\x2', '\x31B', '\x322', '\x5', '\x96', 'L', '\x2', '\x31C', '\x31E', 
		'\a', '<', '\x2', '\x2', '\x31D', '\x31C', '\x3', '\x2', '\x2', '\x2', 
		'\x31D', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x321', '\x5', ':', '\x1E', '\x2', '\x320', 
		'\x31D', '\x3', '\x2', '\x2', '\x2', '\x321', '\x324', '\x3', '\x2', '\x2', 
		'\x2', '\x322', '\x320', '\x3', '\x2', '\x2', '\x2', '\x322', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\x323', '\x33F', '\x3', '\x2', '\x2', '\x2', 
		'\x324', '\x322', '\x3', '\x2', '\x2', '\x2', '\x325', '\x329', '\x5', 
		'\x38', '\x1D', '\x2', '\x326', '\x327', '\a', '<', '\x2', '\x2', '\x327', 
		'\x329', '\x5', ':', '\x1E', '\x2', '\x328', '\x325', '\x3', '\x2', '\x2', 
		'\x2', '\x328', '\x326', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', 
		'\x3', '\x2', '\x2', '\x2', '\x32A', '\x32E', '\x5', '\x9E', 'P', '\x2', 
		'\x32B', '\x32F', '\x5', '\x38', '\x1D', '\x2', '\x32C', '\x32D', '\a', 
		'<', '\x2', '\x2', '\x32D', '\x32F', '\x5', ':', '\x1E', '\x2', '\x32E', 
		'\x32B', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32C', '\x3', '\x2', '\x2', 
		'\x2', '\x32F', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x330', '\x331', 
		'\x5', '\x96', 'L', '\x2', '\x331', '\x33A', '\a', '\b', '\x2', '\x2', 
		'\x332', '\x337', '\x5', 'N', '(', '\x2', '\x333', '\x334', '\a', 'P', 
		'\x2', '\x2', '\x334', '\x336', '\x5', 'N', '(', '\x2', '\x335', '\x333', 
		'\x3', '\x2', '\x2', '\x2', '\x336', '\x339', '\x3', '\x2', '\x2', '\x2', 
		'\x337', '\x335', '\x3', '\x2', '\x2', '\x2', '\x337', '\x338', '\x3', 
		'\x2', '\x2', '\x2', '\x338', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x339', 
		'\x337', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x332', '\x3', '\x2', '\x2', 
		'\x2', '\x33A', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x33D', '\a', '\t', '\x2', '\x2', 
		'\x33D', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x31B', '\x3', 
		'\x2', '\x2', '\x2', '\x33E', '\x328', '\x3', '\x2', '\x2', '\x2', '\x33E', 
		'\x330', '\x3', '\x2', '\x2', '\x2', '\x33F', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x340', '\x341', '\x5', '\x96', 'L', '\x2', '\x341', '\x342', 
		'\x5', ':', '\x1E', '\x2', '\x342', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x344', '\x5', '\x96', 'L', '\x2', '\x344', '\x345', '\a', '\b', 
		'\x2', '\x2', '\x345', '\x346', '\x5', '\x92', 'J', '\x2', '\x346', '\x347', 
		'\a', '\x34', '\x2', '\x2', '\x347', '\x348', '\x5', '\x36', '\x1C', '\x2', 
		'\x348', '\x349', '\a', '\t', '\x2', '\x2', '\x349', '\x34B', '\x3', '\x2', 
		'\x2', '\x2', '\x34A', '\x340', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x343', 
		'\x3', '\x2', '\x2', '\x2', '\x34B', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x34C', '\x34D', '\x5', '\x32', '\x1A', '\x2', '\x34D', '\x351', '\a', 
		'\x34', '\x2', '\x2', '\x34E', '\x352', '\x5', '\x36', '\x1C', '\x2', 
		'\x34F', '\x350', '\a', '<', '\x2', '\x2', '\x350', '\x352', '\x5', ':', 
		'\x1E', '\x2', '\x351', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x351', 
		'\x34F', '\x3', '\x2', '\x2', '\x2', '\x352', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x353', '\x361', '\a', '\x11', '\x2', '\x2', '\x354', '\x362', 
		'\x5', 'R', '*', '\x2', '\x355', '\x35E', '\a', 'J', '\x2', '\x2', '\x356', 
		'\x35B', '\x5', 'R', '*', '\x2', '\x357', '\x358', '\a', 'P', '\x2', '\x2', 
		'\x358', '\x35A', '\x5', 'R', '*', '\x2', '\x359', '\x357', '\x3', '\x2', 
		'\x2', '\x2', '\x35A', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x359', 
		'\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35B', '\x3', 
		'\x2', '\x2', '\x2', '\x35E', '\x356', '\x3', '\x2', '\x2', '\x2', '\x35E', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', '\x3', '\x2', '\x2', 
		'\x2', '\x360', '\x362', '\a', 'K', '\x2', '\x2', '\x361', '\x354', '\x3', 
		'\x2', '\x2', '\x2', '\x361', '\x355', '\x3', '\x2', '\x2', '\x2', '\x362', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x363', '\x364', '\x5', '\xCC', 'g', 
		'\x2', '\x364', 'S', '\x3', '\x2', '\x2', '\x2', '\x365', '\x392', '\x5', 
		'<', '\x1F', '\x2', '\x366', '\x367', '\a', 'J', '\x2', '\x2', '\x367', 
		'\x36B', '\x5', '<', '\x1F', '\x2', '\x368', '\x36A', '\x5', '\xBE', '`', 
		'\x2', '\x369', '\x368', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x36D', 
		'\x3', '\x2', '\x2', '\x2', '\x36B', '\x369', '\x3', '\x2', '\x2', '\x2', 
		'\x36B', '\x36C', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36E', '\x3', 
		'\x2', '\x2', '\x2', '\x36D', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x36F', '\a', 'K', '\x2', '\x2', '\x36F', '\x392', '\x3', '\x2', '\x2', 
		'\x2', '\x370', '\x371', '\a', 'J', '\x2', '\x2', '\x371', '\x375', '\x5', 
		'<', '\x1F', '\x2', '\x372', '\x374', '\x5', '\xC0', '\x61', '\x2', '\x373', 
		'\x372', '\x3', '\x2', '\x2', '\x2', '\x374', '\x377', '\x3', '\x2', '\x2', 
		'\x2', '\x375', '\x373', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x376', '\x378', '\x3', '\x2', '\x2', '\x2', 
		'\x377', '\x375', '\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\a', 
		'K', '\x2', '\x2', '\x379', '\x392', '\x3', '\x2', '\x2', '\x2', '\x37A', 
		'\x37B', '\a', 'J', '\x2', '\x2', '\x37B', '\x37C', '\x5', '\xBE', '`', 
		'\x2', '\x37C', '\x37D', '\a', 'P', '\x2', '\x2', '\x37D', '\x382', '\x5', 
		'\xBE', '`', '\x2', '\x37E', '\x37F', '\a', 'P', '\x2', '\x2', '\x37F', 
		'\x381', '\x5', '\xBE', '`', '\x2', '\x380', '\x37E', '\x3', '\x2', '\x2', 
		'\x2', '\x381', '\x384', '\x3', '\x2', '\x2', '\x2', '\x382', '\x380', 
		'\x3', '\x2', '\x2', '\x2', '\x382', '\x383', '\x3', '\x2', '\x2', '\x2', 
		'\x383', '\x385', '\x3', '\x2', '\x2', '\x2', '\x384', '\x382', '\x3', 
		'\x2', '\x2', '\x2', '\x385', '\x386', '\a', 'K', '\x2', '\x2', '\x386', 
		'\x392', '\x3', '\x2', '\x2', '\x2', '\x387', '\x388', '\a', 'L', '\x2', 
		'\x2', '\x388', '\x389', '\x5', '\xBE', '`', '\x2', '\x389', '\x38A', 
		'\a', 'M', '\x2', '\x2', '\x38A', '\x392', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x38C', '\a', 'J', '\x2', '\x2', '\x38C', '\x38D', '\x5', '\xBE', 
		'`', '\x2', '\x38D', '\x38E', '\a', '\x35', '\x2', '\x2', '\x38E', '\x38F', 
		'\x5', '\xBE', '`', '\x2', '\x38F', '\x390', '\a', 'K', '\x2', '\x2', 
		'\x390', '\x392', '\x3', '\x2', '\x2', '\x2', '\x391', '\x365', '\x3', 
		'\x2', '\x2', '\x2', '\x391', '\x366', '\x3', '\x2', '\x2', '\x2', '\x391', 
		'\x370', '\x3', '\x2', '\x2', '\x2', '\x391', '\x37A', '\x3', '\x2', '\x2', 
		'\x2', '\x391', '\x387', '\x3', '\x2', '\x2', '\x2', '\x391', '\x38B', 
		'\x3', '\x2', '\x2', '\x2', '\x392', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x393', '\x394', '\a', '\x17', '\x2', '\x2', '\x394', '\x396', '\x5', 
		'X', '-', '\x2', '\x395', '\x397', '\x5', '^', '\x30', '\x2', '\x396', 
		'\x395', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', '\x3', '\x2', '\x2', 
		'\x2', '\x397', '\x398', '\x3', '\x2', '\x2', '\x2', '\x398', '\x399', 
		'\x5', 'Z', '.', '\x2', '\x399', '\x39A', '\x5', '\x92', 'J', '\x2', '\x39A', 
		'\x39B', '\a', '\x34', '\x2', '\x2', '\x39B', '\x39C', '\x5', '\x36', 
		'\x1C', '\x2', '\x39C', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x39D', 
		'\x39E', '\a', '\x14', '\x2', '\x2', '\x39E', '\x39F', '\x5', 'X', '-', 
		'\x2', '\x39F', '\x3A0', '\x5', '\\', '/', '\x2', '\x3A0', '\x3A1', '\x5', 
		'\x92', 'J', '\x2', '\x3A1', '\x3A2', '\a', '\x34', '\x2', '\x2', '\x3A2', 
		'\x3A3', '\x5', '\x36', '\x1C', '\x2', '\x3A3', '\x3A5', '\x3', '\x2', 
		'\x2', '\x2', '\x3A4', '\x393', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x39D', 
		'\x3', '\x2', '\x2', '\x2', '\x3A5', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x3A6', '\x3A7', '\t', '\x3', '\x2', '\x2', '\x3A7', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x3A8', '\x3A9', '\x5', '\xD8', 'm', '\x2', '\x3A9', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3AB', '\x5', '\xD8', 'm', '\x2', 
		'\x3AB', ']', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\t', '\x4', 
		'\x2', '\x2', '\x3AD', '_', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3B0', 
		'\x5', '\x92', 'J', '\x2', '\x3AF', '\x3B1', '\x5', '\x8C', 'G', '\x2', 
		'\x3B0', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3C1', '\x3', '\x2', '\x2', 
		'\x2', '\x3B4', '\x3B5', '\x5', '\x88', '\x45', '\x2', '\x3B5', '\x3B6', 
		'\x5', '\x9A', 'N', '\x2', '\x3B6', '\x3B7', '\x5', '\x88', '\x45', '\x2', 
		'\x3B7', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B9', '\a', 
		'J', '\x2', '\x2', '\x3B9', '\x3BA', '\x5', '`', '\x31', '\x2', '\x3BA', 
		'\x3BC', '\a', 'K', '\x2', '\x2', '\x3BB', '\x3BD', '\x5', '\x8C', 'G', 
		'\x2', '\x3BC', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3BC', '\x3', '\x2', '\x2', '\x2', 
		'\x3BE', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C1', '\x3', 
		'\x2', '\x2', '\x2', '\x3C0', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3C0', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3B8', '\x3', '\x2', '\x2', 
		'\x2', '\x3C1', '\x61', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C3', 
		'\a', 'R', '\x2', '\x2', '\x3C3', '\x3C6', '\x5', 'l', '\x37', '\x2', 
		'\x3C4', '\x3C5', '\a', '#', '\x2', '\x2', '\x3C5', '\x3C7', '\x5', '\x1E', 
		'\x10', '\x2', '\x3C6', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3C7', '\x3CE', '\x3', '\x2', '\x2', 
		'\x2', '\x3C8', '\x3CB', '\x5', '\x64', '\x33', '\x2', '\x3C9', '\x3CA', 
		'\a', '#', '\x2', '\x2', '\x3CA', '\x3CC', '\x5', '\x1E', '\x10', '\x2', 
		'\x3CB', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', '\x3', 
		'\x2', '\x2', '\x2', '\x3CC', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3CD', 
		'\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3C8', '\x3', '\x2', '\x2', 
		'\x2', '\x3CE', '\x63', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3D1', 
		'\x5', '\x66', '\x34', '\x2', '\x3D0', '\x3CF', '\x3', '\x2', '\x2', '\x2', 
		'\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D0', '\x3', 
		'\x2', '\x2', '\x2', '\x3D2', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D3', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\a', ';', '\x2', 
		'\x2', '\x3D5', '\x3D6', '\x5', 'h', '\x35', '\x2', '\x3D6', '\x3D7', 
		'\a', 'R', '\x2', '\x2', '\x3D7', '\x3D8', '\x5', 'l', '\x37', '\x2', 
		'\x3D8', 'g', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DE', '\x5', 'j', 
		'\x36', '\x2', '\x3DA', '\x3DB', '\a', 'P', '\x2', '\x2', '\x3DB', '\x3DD', 
		'\x5', 'j', '\x36', '\x2', '\x3DC', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'\x3DD', '\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3DC', '\x3', 
		'\x2', '\x2', '\x2', '\x3DE', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3DF', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DE', '\x3', '\x2', '\x2', 
		'\x2', '\x3E1', '\x3E2', '\x5', '\x88', '\x45', '\x2', '\x3E2', '\x3E3', 
		'\a', '\x36', '\x2', '\x2', '\x3E3', '\x3E4', '\x5', 'n', '\x38', '\x2', 
		'\x3E4', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3E5', '\x3E6', '\a', 
		'\x1D', '\x2', '\x2', '\x3E6', '\x3E9', '\x5', '\x1E', '\x10', '\x2', 
		'\x3E7', '\x3E9', '\x5', 'n', '\x38', '\x2', '\x3E8', '\x3E1', '\x3', 
		'\x2', '\x2', '\x2', '\x3E8', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E8', 
		'\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3E9', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x3EA', '\x3EB', '\x5', 'n', '\x38', '\x2', '\x3EB', '\x3EF', 
		'\a', '\x34', '\x2', '\x2', '\x3EC', '\x3ED', '\x5', '>', ' ', '\x2', 
		'\x3ED', '\x3EE', '\a', '\x33', '\x2', '\x2', '\x3EE', '\x3F0', '\x3', 
		'\x2', '\x2', '\x2', '\x3EF', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EF', 
		'\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F1', '\x3', '\x2', '\x2', 
		'\x2', '\x3F1', '\x3F2', '\x5', '\x36', '\x1C', '\x2', '\x3F2', '\x3F5', 
		'\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F5', '\x5', 'n', '\x38', '\x2', 
		'\x3F4', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F3', '\x3', 
		'\x2', '\x2', '\x2', '\x3F5', 'm', '\x3', '\x2', '\x2', '\x2', '\x3F6', 
		'\x3F7', '\x5', 'p', '\x39', '\x2', '\x3F7', '\x3F8', '\x5', '\xA4', 'S', 
		'\x2', '\x3F8', '\x3F9', '\x5', 'n', '\x38', '\x2', '\x3F9', '\x3FE', 
		'\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\a', '?', '\x2', '\x2', 
		'\x3FB', '\x3FE', '\x5', 'n', '\x38', '\x2', '\x3FC', '\x3FE', '\x5', 
		'p', '\x39', '\x2', '\x3FD', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3FD', 
		'\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FC', '\x3', '\x2', '\x2', 
		'\x2', '\x3FE', 'o', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x401', '\a', 
		'T', '\x2', '\x2', '\x400', '\x402', '\x5', '\x8C', 'G', '\x2', '\x401', 
		'\x400', '\x3', '\x2', '\x2', '\x2', '\x402', '\x403', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x401', '\x3', '\x2', '\x2', '\x2', '\x403', '\x404', 
		'\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\x3', '\x2', '\x2', '\x2', 
		'\x405', '\x406', '\a', '\x35', '\x2', '\x2', '\x406', '\x407', '\x5', 
		'l', '\x37', '\x2', '\x407', '\x425', '\x3', '\x2', '\x2', '\x2', '\x408', 
		'\x409', '\a', '\x1D', '\x2', '\x2', '\x409', '\x40A', '\x5', '\x1E', 
		'\x10', '\x2', '\x40A', '\x40B', '\a', '\x18', '\x2', '\x2', '\x40B', 
		'\x40C', '\x5', 'l', '\x37', '\x2', '\x40C', '\x425', '\x3', '\x2', '\x2', 
		'\x2', '\x40D', '\x40E', '\a', '\x16', '\x2', '\x2', '\x40E', '\x410', 
		'\x5', 'l', '\x37', '\x2', '\x40F', '\x411', '\x5', '\xAC', 'W', '\x2', 
		'\x410', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x410', '\x411', '\x3', 
		'\x2', '\x2', '\x2', '\x411', '\x412', '\x3', '\x2', '\x2', '\x2', '\x412', 
		'\x413', '\a', '!', '\x2', '\x2', '\x413', '\x415', '\x5', 'l', '\x37', 
		'\x2', '\x414', '\x416', '\x5', '\xAC', 'W', '\x2', '\x415', '\x414', 
		'\x3', '\x2', '\x2', '\x2', '\x415', '\x416', '\x3', '\x2', '\x2', '\x2', 
		'\x416', '\x417', '\x3', '\x2', '\x2', '\x2', '\x417', '\x418', '\a', 
		'\x13', '\x2', '\x2', '\x418', '\x419', '\x5', 'l', '\x37', '\x2', '\x419', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', '\a', '\x16', '\x2', 
		'\x2', '\x41B', '\x425', '\x5', '~', '@', '\x2', '\x41C', '\x41D', '\a', 
		'\r', '\x2', '\x2', '\x41D', '\x41E', '\x5', 'l', '\x37', '\x2', '\x41E', 
		'\x41F', '\a', ' ', '\x2', '\x2', '\x41F', '\x420', '\x5', 'x', '=', '\x2', 
		'\x420', '\x425', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', '\a', 
		'\x12', '\x2', '\x2', '\x422', '\x425', '\x5', '\x82', '\x42', '\x2', 
		'\x423', '\x425', '\x5', 'r', ':', '\x2', '\x424', '\x3FF', '\x3', '\x2', 
		'\x2', '\x2', '\x424', '\x408', '\x3', '\x2', '\x2', '\x2', '\x424', '\x40D', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x41A', '\x3', '\x2', '\x2', '\x2', 
		'\x424', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x424', '\x421', '\x3', 
		'\x2', '\x2', '\x2', '\x424', '\x423', '\x3', '\x2', '\x2', '\x2', '\x425', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x426', '\x428', '\x5', 't', ';', '\x2', 
		'\x427', '\x426', '\x3', '\x2', '\x2', '\x2', '\x428', '\x429', '\x3', 
		'\x2', '\x2', '\x2', '\x429', '\x427', '\x3', '\x2', '\x2', '\x2', '\x429', 
		'\x42A', '\x3', '\x2', '\x2', '\x2', '\x42A', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x42B', '\x487', '\x5', '\x94', 'K', '\x2', '\x42C', '\x487', 
		'\x5', '\x90', 'I', '\x2', '\x42D', '\x487', '\x5', '\xAE', 'X', '\x2', 
		'\x42E', '\x42F', '\a', 'J', '\x2', '\x2', '\x42F', '\x430', '\x5', 'l', 
		'\x37', '\x2', '\x430', '\x431', '\a', 'K', '\x2', '\x2', '\x431', '\x487', 
		'\x3', '\x2', '\x2', '\x2', '\x432', '\x433', '\a', 'J', '\x2', '\x2', 
		'\x433', '\x434', '\x5', 'l', '\x37', '\x2', '\x434', '\x435', '\a', 'P', 
		'\x2', '\x2', '\x435', '\x43A', '\x5', 'l', '\x37', '\x2', '\x436', '\x437', 
		'\a', 'P', '\x2', '\x2', '\x437', '\x439', '\x5', 'l', '\x37', '\x2', 
		'\x438', '\x436', '\x3', '\x2', '\x2', '\x2', '\x439', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x438', '\x3', '\x2', '\x2', '\x2', '\x43A', 
		'\x43B', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x43D', '\x3', '\x2', '\x2', 
		'\x2', '\x43C', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x43D', '\x43E', 
		'\a', 'K', '\x2', '\x2', '\x43E', '\x487', '\x3', '\x2', '\x2', '\x2', 
		'\x43F', '\x440', '\a', 'L', '\x2', '\x2', '\x440', '\x445', '\x5', 'l', 
		'\x37', '\x2', '\x441', '\x442', '\a', 'P', '\x2', '\x2', '\x442', '\x444', 
		'\x5', 'l', '\x37', '\x2', '\x443', '\x441', '\x3', '\x2', '\x2', '\x2', 
		'\x444', '\x447', '\x3', '\x2', '\x2', '\x2', '\x445', '\x443', '\x3', 
		'\x2', '\x2', '\x2', '\x445', '\x446', '\x3', '\x2', '\x2', '\x2', '\x446', 
		'\x448', '\x3', '\x2', '\x2', '\x2', '\x447', '\x445', '\x3', '\x2', '\x2', 
		'\x2', '\x448', '\x449', '\a', 'M', '\x2', '\x2', '\x449', '\x487', '\x3', 
		'\x2', '\x2', '\x2', '\x44A', '\x44B', '\a', 'L', '\x2', '\x2', '\x44B', 
		'\x44E', '\x5', 'l', '\x37', '\x2', '\x44C', '\x44D', '\a', 'P', '\x2', 
		'\x2', '\x44D', '\x44F', '\x5', 'l', '\x37', '\x2', '\x44E', '\x44C', 
		'\x3', '\x2', '\x2', '\x2', '\x44E', '\x44F', '\x3', '\x2', '\x2', '\x2', 
		'\x44F', '\x450', '\x3', '\x2', '\x2', '\x2', '\x450', '\x452', '\a', 
		'H', '\x2', '\x2', '\x451', '\x453', '\x5', 'l', '\x37', '\x2', '\x452', 
		'\x451', '\x3', '\x2', '\x2', '\x2', '\x452', '\x453', '\x3', '\x2', '\x2', 
		'\x2', '\x453', '\x454', '\x3', '\x2', '\x2', '\x2', '\x454', '\x455', 
		'\a', 'M', '\x2', '\x2', '\x455', '\x487', '\x3', '\x2', '\x2', '\x2', 
		'\x456', '\x457', '\a', 'L', '\x2', '\x2', '\x457', '\x458', '\x5', 'l', 
		'\x37', '\x2', '\x458', '\x459', '\a', ';', '\x2', '\x2', '\x459', '\x45E', 
		'\x5', 'v', '<', '\x2', '\x45A', '\x45B', '\a', 'P', '\x2', '\x2', '\x45B', 
		'\x45D', '\x5', 'v', '<', '\x2', '\x45C', '\x45A', '\x3', '\x2', '\x2', 
		'\x2', '\x45D', '\x460', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x45C', 
		'\x3', '\x2', '\x2', '\x2', '\x45E', '\x45F', '\x3', '\x2', '\x2', '\x2', 
		'\x45F', '\x461', '\x3', '\x2', '\x2', '\x2', '\x460', '\x45E', '\x3', 
		'\x2', '\x2', '\x2', '\x461', '\x462', '\a', 'M', '\x2', '\x2', '\x462', 
		'\x487', '\x3', '\x2', '\x2', '\x2', '\x463', '\x464', '\a', 'J', '\x2', 
		'\x2', '\x464', '\x465', '\x5', 'n', '\x38', '\x2', '\x465', '\x466', 
		'\x5', '\xA4', 'S', '\x2', '\x466', '\x467', '\a', 'K', '\x2', '\x2', 
		'\x467', '\x487', '\x3', '\x2', '\x2', '\x2', '\x468', '\x469', '\a', 
		'J', '\x2', '\x2', '\x469', '\x46A', '\x5', '\xA4', 'S', '\x2', '\x46A', 
		'\x46B', '\x5', 'n', '\x38', '\x2', '\x46B', '\x46C', '\a', 'K', '\x2', 
		'\x2', '\x46C', '\x487', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', 
		'\x5', '\x98', 'M', '\x2', '\x46E', '\x473', '\a', '\b', '\x2', '\x2', 
		'\x46F', '\x470', '\x5', '\x86', '\x44', '\x2', '\x470', '\x471', '\a', 
		'P', '\x2', '\x2', '\x471', '\x472', '\x5', '\x86', '\x44', '\x2', '\x472', 
		'\x474', '\x3', '\x2', '\x2', '\x2', '\x473', '\x46F', '\x3', '\x2', '\x2', 
		'\x2', '\x473', '\x474', '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', 
		'\x3', '\x2', '\x2', '\x2', '\x475', '\x476', '\a', '\t', '\x2', '\x2', 
		'\x476', '\x487', '\x3', '\x2', '\x2', '\x2', '\x477', '\x478', '\a', 
		'\b', '\x2', '\x2', '\x478', '\x47D', '\x5', '\x86', '\x44', '\x2', '\x479', 
		'\x47A', '\a', 'P', '\x2', '\x2', '\x47A', '\x47C', '\x5', '\x86', '\x44', 
		'\x2', '\x47B', '\x479', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x47F', 
		'\x3', '\x2', '\x2', '\x2', '\x47D', '\x47B', '\x3', '\x2', '\x2', '\x2', 
		'\x47D', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x480', '\x3', 
		'\x2', '\x2', '\x2', '\x47F', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x480', 
		'\x481', '\a', '\t', '\x2', '\x2', '\x481', '\x483', '\x3', '\x2', '\x2', 
		'\x2', '\x482', '\x477', '\x3', '\x2', '\x2', '\x2', '\x483', '\x484', 
		'\x3', '\x2', '\x2', '\x2', '\x484', '\x482', '\x3', '\x2', '\x2', '\x2', 
		'\x484', '\x485', '\x3', '\x2', '\x2', '\x2', '\x485', '\x487', '\x3', 
		'\x2', '\x2', '\x2', '\x486', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x486', 
		'\x42C', '\x3', '\x2', '\x2', '\x2', '\x486', '\x42D', '\x3', '\x2', '\x2', 
		'\x2', '\x486', '\x42E', '\x3', '\x2', '\x2', '\x2', '\x486', '\x432', 
		'\x3', '\x2', '\x2', '\x2', '\x486', '\x43F', '\x3', '\x2', '\x2', '\x2', 
		'\x486', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x486', '\x456', '\x3', 
		'\x2', '\x2', '\x2', '\x486', '\x463', '\x3', '\x2', '\x2', '\x2', '\x486', 
		'\x468', '\x3', '\x2', '\x2', '\x2', '\x486', '\x46D', '\x3', '\x2', '\x2', 
		'\x2', '\x486', '\x482', '\x3', '\x2', '\x2', '\x2', '\x487', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x488', '\x489', '\x5', '\x88', '\x45', '\x2', '\x489', 
		'\x48A', '\a', '\x36', '\x2', '\x2', '\x48A', '\x48B', '\x5', 'l', '\x37', 
		'\x2', '\x48B', '\x490', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x48D', 
		'\a', '\x1D', '\x2', '\x2', '\x48D', '\x490', '\x5', '\x1E', '\x10', '\x2', 
		'\x48E', '\x490', '\x5', 'l', '\x37', '\x2', '\x48F', '\x488', '\x3', 
		'\x2', '\x2', '\x2', '\x48F', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x48F', 
		'\x48E', '\x3', '\x2', '\x2', '\x2', '\x490', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x491', '\x498', '\x5', '\xA8', 'U', '\x2', '\x492', '\x494', 
		'\x5', 'z', '>', '\x2', '\x493', '\x495', '\x5', '\xAC', 'W', '\x2', '\x494', 
		'\x493', '\x3', '\x2', '\x2', '\x2', '\x495', '\x496', '\x3', '\x2', '\x2', 
		'\x2', '\x496', '\x494', '\x3', '\x2', '\x2', '\x2', '\x496', '\x497', 
		'\x3', '\x2', '\x2', '\x2', '\x497', '\x499', '\x3', '\x2', '\x2', '\x2', 
		'\x498', '\x492', '\x3', '\x2', '\x2', '\x2', '\x499', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x49A', '\x498', '\x3', '\x2', '\x2', '\x2', '\x49A', 
		'\x49B', '\x3', '\x2', '\x2', '\x2', '\x49B', '\x49C', '\x3', '\x2', '\x2', 
		'\x2', '\x49C', '\x49D', '\x5', '\xAA', 'V', '\x2', '\x49D', 'y', '\x3', 
		'\x2', '\x2', '\x2', '\x49E', '\x49F', '\x5', '\x88', '\x45', '\x2', '\x49F', 
		'\x4A0', '\a', '\x35', '\x2', '\x2', '\x4A0', '\x4A3', '\x5', 'l', '\x37', 
		'\x2', '\x4A1', '\x4A2', '\a', '#', '\x2', '\x2', '\x4A2', '\x4A4', '\x5', 
		'\x1E', '\x10', '\x2', '\x4A3', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4A3', 
		'\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4AC', '\x3', '\x2', '\x2', 
		'\x2', '\x4A5', '\x4A6', '\x5', '\x88', '\x45', '\x2', '\x4A6', '\x4A9', 
		'\x5', '|', '?', '\x2', '\x4A7', '\x4A8', '\a', '#', '\x2', '\x2', '\x4A8', 
		'\x4AA', '\x5', '\x1E', '\x10', '\x2', '\x4A9', '\x4A7', '\x3', '\x2', 
		'\x2', '\x2', '\x4A9', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4AC', 
		'\x3', '\x2', '\x2', '\x2', '\x4AB', '\x49E', '\x3', '\x2', '\x2', '\x2', 
		'\x4AB', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4AC', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x4AD', '\x4AF', '\x5', '\x80', '\x41', '\x2', '\x4AE', 
		'\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B0', '\x3', '\x2', '\x2', 
		'\x2', '\x4B0', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B1', 
		'\x3', '\x2', '\x2', '\x2', '\x4B1', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x4B2', '\x4B3', '\a', '\b', '\x2', '\x2', '\x4B3', '\x4B4', '\x5', '|', 
		'?', '\x2', '\x4B4', '\x4B5', '\a', '\t', '\x2', '\x2', '\x4B5', '\x4B8', 
		'\x3', '\x2', '\x2', '\x2', '\x4B6', '\x4B8', '\x5', '|', '?', '\x2', 
		'\x4B7', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B6', '\x3', 
		'\x2', '\x2', '\x2', '\x4B8', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x4B9', 
		'\x4BA', '\a', ';', '\x2', '\x2', '\x4BA', '\x4BB', '\x5', 'h', '\x35', 
		'\x2', '\x4BB', '\x4BC', '\a', '\x35', '\x2', '\x2', '\x4BC', '\x4BD', 
		'\x5', 'l', '\x37', '\x2', '\x4BD', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x4BE', '\x4C2', '\x5', '\xA8', 'U', '\x2', '\x4BF', '\x4C1', '\x5', 
		'\x84', '\x43', '\x2', '\x4C0', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4C1', 
		'\x4C4', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C0', '\x3', '\x2', '\x2', 
		'\x2', '\x4C2', '\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x4C5', 
		'\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C2', '\x3', '\x2', '\x2', '\x2', 
		'\x4C5', '\x4C9', '\x5', 'l', '\x37', '\x2', '\x4C6', '\x4C8', '\x5', 
		'\xAC', 'W', '\x2', '\x4C7', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4C8', 
		'\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4C7', '\x3', '\x2', '\x2', 
		'\x2', '\x4C9', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4CC', 
		'\x3', '\x2', '\x2', '\x2', '\x4CB', '\x4C9', '\x3', '\x2', '\x2', '\x2', 
		'\x4CC', '\x4CD', '\x5', '\xAA', 'V', '\x2', '\x4CD', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x4CE', '\x4D0', '\x5', 'l', '\x37', '\x2', '\x4CF', '\x4D1', 
		'\x5', '\xAC', 'W', '\x2', '\x4D0', '\x4CF', '\x3', '\x2', '\x2', '\x2', 
		'\x4D1', '\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D0', '\x3', 
		'\x2', '\x2', '\x2', '\x4D2', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D3', 
		'\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D5', '\x5', '\x88', 
		'\x45', '\x2', '\x4D5', '\x4D6', '\a', '\x36', '\x2', '\x2', '\x4D6', 
		'\x4D8', '\x5', 'l', '\x37', '\x2', '\x4D7', '\x4D9', '\x5', '\xAC', 'W', 
		'\x2', '\x4D8', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4DA', 
		'\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4D8', '\x3', '\x2', '\x2', '\x2', 
		'\x4DA', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4E9', '\x3', 
		'\x2', '\x2', '\x2', '\x4DC', '\x4DD', '\a', '\x1D', '\x2', '\x2', '\x4DD', 
		'\x4DF', '\x5', '\x1E', '\x10', '\x2', '\x4DE', '\x4E0', '\x5', '\xAC', 
		'W', '\x2', '\x4DF', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E1', 
		'\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4DF', '\x3', '\x2', '\x2', '\x2', 
		'\x4E1', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E9', '\x3', 
		'\x2', '\x2', '\x2', '\x4E3', '\x4E5', '\x5', '\xAC', 'W', '\x2', '\x4E4', 
		'\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\x3', '\x2', '\x2', 
		'\x2', '\x4E6', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E7', 
		'\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E9', '\x3', '\x2', '\x2', '\x2', 
		'\x4E8', '\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4D4', '\x3', 
		'\x2', '\x2', '\x2', '\x4E8', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4E8', 
		'\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x4EA', '\x4EB', '\x5', '\x94', 'K', '\x2', '\x4EB', '\x4EC', 
		'\a', 'R', '\x2', '\x2', '\x4EC', '\x4ED', '\x5', 'l', '\x37', '\x2', 
		'\x4ED', '\x87', '\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\x5', 
		'\x8A', '\x46', '\x2', '\x4EF', '\x4F0', '\x5', '\xA0', 'Q', '\x2', '\x4F0', 
		'\x4F1', '\x5', '\x88', '\x45', '\x2', '\x4F1', '\x4F4', '\x3', '\x2', 
		'\x2', '\x2', '\x4F2', '\x4F4', '\x5', '\x8A', '\x46', '\x2', '\x4F3', 
		'\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4F3', '\x4F2', '\x3', '\x2', '\x2', 
		'\x2', '\x4F4', '\x89', '\x3', '\x2', '\x2', '\x2', '\x4F5', '\x502', 
		'\x5', '\x8C', 'G', '\x2', '\x4F6', '\x4F9', '\a', '?', '\x2', '\x2', 
		'\x4F7', '\x4FA', '\x5', '\xD2', 'j', '\x2', '\x4F8', '\x4FA', '\x5', 
		'\xD4', 'k', '\x2', '\x4F9', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4F9', 
		'\x4F8', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x502', '\x3', '\x2', '\x2', 
		'\x2', '\x4FB', '\x4FD', '\x5', '\x90', 'I', '\x2', '\x4FC', '\x4FE', 
		'\x5', '\x8C', 'G', '\x2', '\x4FD', '\x4FC', '\x3', '\x2', '\x2', '\x2', 
		'\x4FE', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4FD', '\x3', 
		'\x2', '\x2', '\x2', '\x4FF', '\x500', '\x3', '\x2', '\x2', '\x2', '\x500', 
		'\x502', '\x3', '\x2', '\x2', '\x2', '\x501', '\x4F5', '\x3', '\x2', '\x2', 
		'\x2', '\x501', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x501', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '\x502', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x503', '\x506', '\x5', '\x92', 'J', '\x2', '\x504', '\x505', '\a', '\x44', 
		'\x2', '\x2', '\x505', '\x507', '\x5', '\x8C', 'G', '\x2', '\x506', '\x504', 
		'\x3', '\x2', '\x2', '\x2', '\x506', '\x507', '\x3', '\x2', '\x2', '\x2', 
		'\x507', '\x538', '\x3', '\x2', '\x2', '\x2', '\x508', '\x538', '\x5', 
		'\x90', 'I', '\x2', '\x509', '\x50A', '\x5', '\x98', 'M', '\x2', '\x50A', 
		'\x513', '\a', '\b', '\x2', '\x2', '\x50B', '\x510', '\x5', '\x8E', 'H', 
		'\x2', '\x50C', '\x50D', '\a', 'P', '\x2', '\x2', '\x50D', '\x50F', '\x5', 
		'\x8E', 'H', '\x2', '\x50E', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50F', 
		'\x512', '\x3', '\x2', '\x2', '\x2', '\x510', '\x50E', '\x3', '\x2', '\x2', 
		'\x2', '\x510', '\x511', '\x3', '\x2', '\x2', '\x2', '\x511', '\x514', 
		'\x3', '\x2', '\x2', '\x2', '\x512', '\x510', '\x3', '\x2', '\x2', '\x2', 
		'\x513', '\x50B', '\x3', '\x2', '\x2', '\x2', '\x513', '\x514', '\x3', 
		'\x2', '\x2', '\x2', '\x514', '\x515', '\x3', '\x2', '\x2', '\x2', '\x515', 
		'\x516', '\a', '\t', '\x2', '\x2', '\x516', '\x538', '\x3', '\x2', '\x2', 
		'\x2', '\x517', '\x538', '\x5', '\xAE', 'X', '\x2', '\x518', '\x538', 
		'\a', '$', '\x2', '\x2', '\x519', '\x51A', '\a', 'J', '\x2', '\x2', '\x51A', 
		'\x51B', '\x5', '\x88', '\x45', '\x2', '\x51B', '\x51C', '\a', 'K', '\x2', 
		'\x2', '\x51C', '\x538', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', 
		'\a', 'J', '\x2', '\x2', '\x51E', '\x51F', '\x5', '\x88', '\x45', '\x2', 
		'\x51F', '\x520', '\a', 'P', '\x2', '\x2', '\x520', '\x525', '\x5', '\x88', 
		'\x45', '\x2', '\x521', '\x522', '\a', 'P', '\x2', '\x2', '\x522', '\x524', 
		'\x5', '\x88', '\x45', '\x2', '\x523', '\x521', '\x3', '\x2', '\x2', '\x2', 
		'\x524', '\x527', '\x3', '\x2', '\x2', '\x2', '\x525', '\x523', '\x3', 
		'\x2', '\x2', '\x2', '\x525', '\x526', '\x3', '\x2', '\x2', '\x2', '\x526', 
		'\x528', '\x3', '\x2', '\x2', '\x2', '\x527', '\x525', '\x3', '\x2', '\x2', 
		'\x2', '\x528', '\x529', '\a', 'K', '\x2', '\x2', '\x529', '\x538', '\x3', 
		'\x2', '\x2', '\x2', '\x52A', '\x52B', '\a', 'L', '\x2', '\x2', '\x52B', 
		'\x530', '\x5', '\x88', '\x45', '\x2', '\x52C', '\x52D', '\a', 'P', '\x2', 
		'\x2', '\x52D', '\x52F', '\x5', '\x88', '\x45', '\x2', '\x52E', '\x52C', 
		'\x3', '\x2', '\x2', '\x2', '\x52F', '\x532', '\x3', '\x2', '\x2', '\x2', 
		'\x530', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x530', '\x531', '\x3', 
		'\x2', '\x2', '\x2', '\x531', '\x533', '\x3', '\x2', '\x2', '\x2', '\x532', 
		'\x530', '\x3', '\x2', '\x2', '\x2', '\x533', '\x534', '\a', 'M', '\x2', 
		'\x2', '\x534', '\x538', '\x3', '\x2', '\x2', '\x2', '\x535', '\x536', 
		'\a', '\x43', '\x2', '\x2', '\x536', '\x538', '\x5', '\x8C', 'G', '\x2', 
		'\x537', '\x503', '\x3', '\x2', '\x2', '\x2', '\x537', '\x508', '\x3', 
		'\x2', '\x2', '\x2', '\x537', '\x509', '\x3', '\x2', '\x2', '\x2', '\x537', 
		'\x517', '\x3', '\x2', '\x2', '\x2', '\x537', '\x518', '\x3', '\x2', '\x2', 
		'\x2', '\x537', '\x519', '\x3', '\x2', '\x2', '\x2', '\x537', '\x51D', 
		'\x3', '\x2', '\x2', '\x2', '\x537', '\x52A', '\x3', '\x2', '\x2', '\x2', 
		'\x537', '\x535', '\x3', '\x2', '\x2', '\x2', '\x538', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x539', '\x53A', '\x5', '\x94', 'K', '\x2', '\x53A', 
		'\x53B', '\a', 'R', '\x2', '\x2', '\x53B', '\x53C', '\x5', '\x88', '\x45', 
		'\x2', '\x53C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', 
		'\a', 'J', '\x2', '\x2', '\x53E', '\x54A', '\a', 'K', '\x2', '\x2', '\x53F', 
		'\x540', '\a', 'L', '\x2', '\x2', '\x540', '\x54A', '\a', 'M', '\x2', 
		'\x2', '\x541', '\x543', '\a', 'J', '\x2', '\x2', '\x542', '\x544', '\a', 
		'P', '\x2', '\x2', '\x543', '\x542', '\x3', '\x2', '\x2', '\x2', '\x544', 
		'\x545', '\x3', '\x2', '\x2', '\x2', '\x545', '\x543', '\x3', '\x2', '\x2', 
		'\x2', '\x545', '\x546', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', 
		'\x3', '\x2', '\x2', '\x2', '\x547', '\x54A', '\a', 'K', '\x2', '\x2', 
		'\x548', '\x54A', '\x5', '\x98', 'M', '\x2', '\x549', '\x53D', '\x3', 
		'\x2', '\x2', '\x2', '\x549', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x549', 
		'\x541', '\x3', '\x2', '\x2', '\x2', '\x549', '\x548', '\x3', '\x2', '\x2', 
		'\x2', '\x54A', '\x91', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x551', 
		'\x5', '\xB2', 'Z', '\x2', '\x54C', '\x54D', '\a', 'J', '\x2', '\x2', 
		'\x54D', '\x54E', '\x5', '\xBA', '^', '\x2', '\x54E', '\x54F', '\a', 'K', 
		'\x2', '\x2', '\x54F', '\x551', '\x3', '\x2', '\x2', '\x2', '\x550', '\x54B', 
		'\x3', '\x2', '\x2', '\x2', '\x550', '\x54C', '\x3', '\x2', '\x2', '\x2', 
		'\x551', '\x93', '\x3', '\x2', '\x2', '\x2', '\x552', '\x558', '\x5', 
		'\xC6', '\x64', '\x2', '\x553', '\x554', '\a', 'J', '\x2', '\x2', '\x554', 
		'\x555', '\x5', '\xCE', 'h', '\x2', '\x555', '\x556', '\a', 'K', '\x2', 
		'\x2', '\x556', '\x558', '\x3', '\x2', '\x2', '\x2', '\x557', '\x552', 
		'\x3', '\x2', '\x2', '\x2', '\x557', '\x553', '\x3', '\x2', '\x2', '\x2', 
		'\x558', '\x95', '\x3', '\x2', '\x2', '\x2', '\x559', '\x55F', '\x5', 
		'\xB4', '[', '\x2', '\x55A', '\x55B', '\a', 'J', '\x2', '\x2', '\x55B', 
		'\x55C', '\x5', '\xBC', '_', '\x2', '\x55C', '\x55D', '\a', 'K', '\x2', 
		'\x2', '\x55D', '\x55F', '\x3', '\x2', '\x2', '\x2', '\x55E', '\x559', 
		'\x3', '\x2', '\x2', '\x2', '\x55E', '\x55A', '\x3', '\x2', '\x2', '\x2', 
		'\x55F', '\x97', '\x3', '\x2', '\x2', '\x2', '\x560', '\x566', '\x5', 
		'\xC8', '\x65', '\x2', '\x561', '\x562', '\a', 'J', '\x2', '\x2', '\x562', 
		'\x563', '\x5', '\xA6', 'T', '\x2', '\x563', '\x564', '\a', 'K', '\x2', 
		'\x2', '\x564', '\x566', '\x3', '\x2', '\x2', '\x2', '\x565', '\x560', 
		'\x3', '\x2', '\x2', '\x2', '\x565', '\x561', '\x3', '\x2', '\x2', '\x2', 
		'\x566', '\x99', '\x3', '\x2', '\x2', '\x2', '\x567', '\x56D', '\x5', 
		'\xBA', '^', '\x2', '\x568', '\x569', '\a', 'U', '\x2', '\x2', '\x569', 
		'\x56A', '\x5', '\xB2', 'Z', '\x2', '\x56A', '\x56B', '\a', 'U', '\x2', 
		'\x2', '\x56B', '\x56D', '\x3', '\x2', '\x2', '\x2', '\x56C', '\x567', 
		'\x3', '\x2', '\x2', '\x2', '\x56C', '\x568', '\x3', '\x2', '\x2', '\x2', 
		'\x56D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x574', '\x5', 
		'\xCE', 'h', '\x2', '\x56F', '\x570', '\a', 'U', '\x2', '\x2', '\x570', 
		'\x571', '\x5', '\xC6', '\x64', '\x2', '\x571', '\x572', '\a', 'U', '\x2', 
		'\x2', '\x572', '\x574', '\x3', '\x2', '\x2', '\x2', '\x573', '\x56E', 
		'\x3', '\x2', '\x2', '\x2', '\x573', '\x56F', '\x3', '\x2', '\x2', '\x2', 
		'\x574', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x575', '\x57B', '\x5', 
		'\xBC', '_', '\x2', '\x576', '\x577', '\a', 'U', '\x2', '\x2', '\x577', 
		'\x578', '\x5', '\xB4', '[', '\x2', '\x578', '\x579', '\a', 'U', '\x2', 
		'\x2', '\x579', '\x57B', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x575', 
		'\x3', '\x2', '\x2', '\x2', '\x57A', '\x576', '\x3', '\x2', '\x2', '\x2', 
		'\x57B', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x582', '\x5', 
		'\xA6', 'T', '\x2', '\x57D', '\x57E', '\a', 'U', '\x2', '\x2', '\x57E', 
		'\x57F', '\x5', '\xC8', '\x65', '\x2', '\x57F', '\x580', '\a', 'U', '\x2', 
		'\x2', '\x580', '\x582', '\x3', '\x2', '\x2', '\x2', '\x581', '\x57C', 
		'\x3', '\x2', '\x2', '\x2', '\x581', '\x57D', '\x3', '\x2', '\x2', '\x2', 
		'\x582', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x583', '\x586', '\x5', 
		'\x9A', 'N', '\x2', '\x584', '\x586', '\x5', '\x9E', 'P', '\x2', '\x585', 
		'\x583', '\x3', '\x2', '\x2', '\x2', '\x585', '\x584', '\x3', '\x2', '\x2', 
		'\x2', '\x586', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x587', '\x58A', 
		'\x5', '\x9C', 'O', '\x2', '\x588', '\x58A', '\x5', '\xA0', 'Q', '\x2', 
		'\x589', '\x587', '\x3', '\x2', '\x2', '\x2', '\x589', '\x588', '\x3', 
		'\x2', '\x2', '\x2', '\x58A', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x58B', 
		'\x58E', '\a', 'Q', '\x2', '\x2', '\x58C', '\x58E', '\x5', '\xD0', 'i', 
		'\x2', '\x58D', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x58D', '\x58C', 
		'\x3', '\x2', '\x2', '\x2', '\x58E', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x58F', '\x590', '\t', '\x5', '\x2', '\x2', '\x590', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\x591', '\x592', '\t', '\x6', '\x2', '\x2', '\x592', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x593', '\x594', '\t', '\a', '\x2', '\x2', 
		'\x594', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x595', '\x59A', '\x5', 
		'\xD2', 'j', '\x2', '\x596', '\x59A', '\x5', '\xD4', 'k', '\x2', '\x597', 
		'\x59A', '\x5', '\xD6', 'l', '\x2', '\x598', '\x59A', '\x5', '\xD8', 'm', 
		'\x2', '\x599', '\x595', '\x3', '\x2', '\x2', '\x2', '\x599', '\x596', 
		'\x3', '\x2', '\x2', '\x2', '\x599', '\x597', '\x3', '\x2', '\x2', '\x2', 
		'\x599', '\x598', '\x3', '\x2', '\x2', '\x2', '\x59A', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x59B', '\x59C', '\t', '\b', '\x2', '\x2', '\x59C', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x5A1', '\t', '\t', '\x2', 
		'\x2', '\x59E', '\x5A0', '\a', '\x37', '\x2', '\x2', '\x59F', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A3', '\x3', '\x2', '\x2', '\x2', 
		'\x5A1', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\x3', 
		'\x2', '\x2', '\x2', '\x5A2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x5A3', 
		'\x5A1', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A8', '\a', 'Y', '\x2', 
		'\x2', '\x5A5', '\x5A7', '\a', '\x37', '\x2', '\x2', '\x5A6', '\x5A5', 
		'\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5AA', '\x3', '\x2', '\x2', '\x2', 
		'\x5A8', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5A9', '\x3', 
		'\x2', '\x2', '\x2', '\x5A9', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x5AA', 
		'\x5A8', '\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5AC', '\x5', '\xB8', 
		']', '\x2', '\x5AC', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x5AD', '\x5AE', 
		'\t', '\n', '\x2', '\x2', '\x5AE', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\x5AF', '\x5B1', '\x5', '\xB8', ']', '\x2', '\x5B0', '\x5AF', '\x3', 
		'\x2', '\x2', '\x2', '\x5B1', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x5B2', 
		'\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5B3', '\x3', '\x2', '\x2', 
		'\x2', '\x5B3', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B8', 
		'\a', 'Q', '\x2', '\x2', '\x5B5', '\x5B7', '\x5', '\xB8', ']', '\x2', 
		'\x5B6', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5B7', '\x5BA', '\x3', 
		'\x2', '\x2', '\x2', '\x5B8', '\x5B6', '\x3', '\x2', '\x2', '\x2', '\x5B8', 
		'\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5B9', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\x5BA', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5BC', 
		'\x5', '\xB2', 'Z', '\x2', '\x5BC', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\x5BD', '\x5BE', '\x5', '\xB4', '[', '\x2', '\x5BE', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\x5BF', '\x5C0', '\x5', '\xB4', '[', '\x2', '\x5C0', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C2', '\x5', '\xB4', '[', '\x2', 
		'\x5C2', '\x5C3', '\a', '\x46', '\x2', '\x2', '\x5C3', '\x5C5', '\x3', 
		'\x2', '\x2', '\x2', '\x5C4', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C5', 
		'\x5C8', '\x3', '\x2', '\x2', '\x2', '\x5C6', '\x5C4', '\x3', '\x2', '\x2', 
		'\x2', '\x5C6', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\x5C7', '\x5C9', 
		'\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5C6', '\x3', '\x2', '\x2', '\x2', 
		'\x5C9', '\x5CA', '\x5', '\xB4', '[', '\x2', '\x5CA', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\x5CB', '\x5CC', '\x5', '\xC4', '\x63', '\x2', '\x5CC', 
		'\x5CD', '\a', '\x46', '\x2', '\x2', '\x5CD', '\x5CF', '\x3', '\x2', '\x2', 
		'\x2', '\x5CE', '\x5CB', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CF', 
		'\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D0', '\x3', '\x2', '\x2', '\x2', 
		'\x5D0', '\x5D1', '\x5', '\xB2', 'Z', '\x2', '\x5D1', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\x5D2', '\x5D3', '\x5', '\xC4', '\x63', '\x2', '\x5D3', 
		'\x5D4', '\a', '\x46', '\x2', '\x2', '\x5D4', '\x5D6', '\x3', '\x2', '\x2', 
		'\x2', '\x5D5', '\x5D2', '\x3', '\x2', '\x2', '\x2', '\x5D5', '\x5D6', 
		'\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D7', '\x3', '\x2', '\x2', '\x2', 
		'\x5D7', '\x5D8', '\x5', '\xB4', '[', '\x2', '\x5D8', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\x5D9', '\x5DA', '\x5', '\xC4', '\x63', '\x2', '\x5DA', 
		'\x5DB', '\a', '\x46', '\x2', '\x2', '\x5DB', '\x5DD', '\x3', '\x2', '\x2', 
		'\x2', '\x5DC', '\x5D9', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DD', 
		'\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DE', '\x3', '\x2', '\x2', '\x2', 
		'\x5DE', '\x5DF', '\x5', '\xC0', '\x61', '\x2', '\x5DF', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x5E0', '\x5E1', '\x5', '\xC4', '\x63', '\x2', '\x5E1', 
		'\x5E2', '\a', '\x46', '\x2', '\x2', '\x5E2', '\x5E4', '\x3', '\x2', '\x2', 
		'\x2', '\x5E3', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E4', 
		'\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E5', '\x3', '\x2', '\x2', '\x2', 
		'\x5E5', '\x5E6', '\x5', '\xC2', '\x62', '\x2', '\x5E6', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x5E7', '\x5E8', '\x5', '\xC4', '\x63', '\x2', '\x5E8', 
		'\x5E9', '\a', '\x46', '\x2', '\x2', '\x5E9', '\x5EB', '\x3', '\x2', '\x2', 
		'\x2', '\x5EA', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5EB', 
		'\x3', '\x2', '\x2', '\x2', '\x5EB', '\x5EC', '\x3', '\x2', '\x2', '\x2', 
		'\x5EC', '\x5ED', '\x5', '\xBA', '^', '\x2', '\x5ED', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\x5EE', '\x5EF', '\x5', '\xC4', '\x63', '\x2', '\x5EF', 
		'\x5F0', '\a', '\x46', '\x2', '\x2', '\x5F0', '\x5F2', '\x3', '\x2', '\x2', 
		'\x2', '\x5F1', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5F1', '\x5F2', 
		'\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F3', '\x3', '\x2', '\x2', '\x2', 
		'\x5F3', '\x5F4', '\x5', '\xBC', '_', '\x2', '\x5F4', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\x5F5', '\x5F6', '\t', '\v', '\x2', '\x2', '\x5F6', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5F8', '\a', ']', '\x2', '\x2', 
		'\x5F8', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x5F9', '\x5FA', '\a', 'V', 
		'\x2', '\x2', '\x5FA', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5FC', 
		'\a', 'W', '\x2', '\x2', '\x5FC', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xDD', '\xE1', '\xE6', '\xEC', '\xF5', '\xF9', '\x100', '\x109', 
		'\x115', '\x11A', '\x11C', '\x124', '\x127', '\x12A', '\x139', '\x13C', 
		'\x13F', '\x14B', '\x14E', '\x151', '\x155', '\x159', '\x15E', '\x161', 
		'\x166', '\x16E', '\x172', '\x174', '\x17E', '\x182', '\x184', '\x187', 
		'\x194', '\x197', '\x19A', '\x1A6', '\x1A9', '\x1AC', '\x1AE', '\x1B2', 
		'\x1B8', '\x1BC', '\x1BE', '\x1C9', '\x1CE', '\x1D1', '\x1D7', '\x1DD', 
		'\x1E3', '\x1E9', '\x1EF', '\x1F5', '\x1FE', '\x201', '\x207', '\x20E', 
		'\x212', '\x219', '\x21C', '\x232', '\x239', '\x23B', '\x242', '\x24E', 
		'\x252', '\x259', '\x25C', '\x263', '\x267', '\x26E', '\x272', '\x279', 
		'\x27C', '\x282', '\x28B', '\x291', '\x295', '\x29C', '\x2A4', '\x2AC', 
		'\x2B1', '\x2BB', '\x2C8', '\x2D8', '\x2E1', '\x2E6', '\x2F3', '\x2F8', 
		'\x301', '\x304', '\x307', '\x310', '\x318', '\x31D', '\x322', '\x328', 
		'\x32E', '\x337', '\x33A', '\x33E', '\x34A', '\x351', '\x35B', '\x35E', 
		'\x361', '\x36B', '\x375', '\x382', '\x391', '\x396', '\x3A4', '\x3B2', 
		'\x3BE', '\x3C0', '\x3C6', '\x3CB', '\x3CD', '\x3D2', '\x3DE', '\x3E8', 
		'\x3EF', '\x3F4', '\x3FD', '\x403', '\x410', '\x415', '\x424', '\x429', 
		'\x43A', '\x445', '\x44E', '\x452', '\x45E', '\x473', '\x47D', '\x484', 
		'\x486', '\x48F', '\x496', '\x49A', '\x4A3', '\x4A9', '\x4AB', '\x4B0', 
		'\x4B7', '\x4C2', '\x4C9', '\x4D2', '\x4DA', '\x4E1', '\x4E6', '\x4E8', 
		'\x4F3', '\x4F9', '\x4FF', '\x501', '\x506', '\x510', '\x513', '\x525', 
		'\x530', '\x537', '\x545', '\x549', '\x550', '\x557', '\x55E', '\x565', 
		'\x56C', '\x573', '\x57A', '\x581', '\x585', '\x589', '\x58D', '\x599', 
		'\x5A1', '\x5A8', '\x5B2', '\x5B8', '\x5C6', '\x5CE', '\x5D5', '\x5DC', 
		'\x5E3', '\x5EA', '\x5F1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
