//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/alexkane/study/spring-lang/Spring/src/Spring/src/Grammar/GHaskellParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class GHaskellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, TAB=2, WS=3, COMMENT=4, NCOMMENT=5, OCURLY=6, CCURLY=7, VOCURLY=8, 
		VCCURLY=9, SEMI=10, CASE=11, CLASS=12, DATA=13, DEFAULT=14, DERIVING=15, 
		DO=16, ELSE=17, EXPORT=18, FOREIGN=19, IF=20, IMPORT=21, IN=22, INFIX=23, 
		INFIXL=24, INFIXR=25, INSTANCE=26, LET=27, MODULE=28, NEWTYPE=29, OF=30, 
		THEN=31, TYPE=32, WHERE=33, WILDCARD=34, QUALIFIED=35, AS=36, HIDING=37, 
		LANGUAGE=38, INLINE=39, NOINLINE=40, SPECIALIZE=41, CCALL=42, STDCALL=43, 
		CPPCALL=44, JVMCALL=45, DOTNETCALL=46, SAFE=47, UNSAFE=48, DoubleArrow=49, 
		DoubleColon=50, Arrow=51, Revarrow=52, Hash=53, Less=54, Greater=55, Ampersand=56, 
		Pipe=57, Bang=58, Caret=59, Plus=60, Minus=61, Asterisk=62, Percent=63, 
		Divide=64, Tilde=65, Atsign=66, Dollar=67, Dot=68, Semi=69, DoubleDot=70, 
		QuestionMark=71, OpenRoundBracket=72, CloseRoundBracket=73, OpenSquareBracket=74, 
		CloseSquareBracket=75, OpenCommentBracket=76, CloseCommentBracket=77, 
		Comma=78, Colon=79, Eq=80, Quote=81, DoubleQuote=82, BackQuote=83, CHAR=84, 
		STRING=85, VARID=86, CONID=87, DECIMAL=88, OCTAL=89, HEXADECIMAL=90, FLOAT=91, 
		EXPONENT=92, ASCSYMBOL=93, UNISYMBOL=94;
	public const int
		RULE_varid = 0, RULE_conid = 1, RULE_ascSymbol = 2, RULE_varsym = 3, RULE_consym = 4, 
		RULE_con = 5, RULE_varop = 6, RULE_conop = 7, RULE_op = 8, RULE_module = 9, 
		RULE_tycon = 10, RULE_atype = 11, RULE_type = 12, RULE_constr = 13, RULE_constrs = 14, 
		RULE_simpletype = 15, RULE_var = 16, RULE_gendecl = 17, RULE_integer = 18, 
		RULE_pfloat = 19, RULE_pchar = 20, RULE_pstring = 21, RULE_literal = 22, 
		RULE_apat = 23, RULE_funlhs = 24, RULE_lexp = 25, RULE_qop = 26, RULE_exp = 27, 
		RULE_rhs = 28, RULE_decl = 29, RULE_topdecl = 30;
	public static readonly string[] ruleNames = {
		"varid", "conid", "ascSymbol", "varsym", "consym", "con", "varop", "conop", 
		"op", "module", "tycon", "atype", "type", "constr", "constrs", "simpletype", 
		"var", "gendecl", "integer", "pfloat", "pchar", "pstring", "literal", 
		"apat", "funlhs", "lexp", "qop", "exp", "rhs", "decl", "topdecl"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'{'", "'}'", "'VOCURLY'", "'VCCURLY'", 
		"'SEMI'", "'case'", "'class'", "'data'", "'default'", "'deriving'", "'do'", 
		"'else'", "'export'", "'foreign'", "'if'", "'import'", "'in'", "'infix'", 
		"'infixl'", "'infixr'", "'instance'", "'let'", "'module'", "'newtype'", 
		"'of'", "'then'", "'type'", "'where'", "'_'", "'qualified'", "'as'", "'hiding'", 
		"'LANGUAGE'", "'INLINE'", "'NOINLINE'", "'SPECIALIZE'", "'ccall'", "'stdcall'", 
		"'cplusplus'", "'jvm'", "'dotnet'", "'safe'", "'unsafe'", "'=>'", "'::'", 
		"'->'", "'<-'", "'#'", "'<'", "'>'", "'&'", "'|'", "'!'", "'^'", "'+'", 
		"'-'", "'*'", "'%'", "'/'", "'~'", "'@'", "'$'", "'.'", "';'", "'..'", 
		"'?'", "'('", "')'", "'['", "']'", "'{-#'", "'#-}'", "','", "':'", "'='", 
		"'''", "'\\'", "'`'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "TAB", "WS", "COMMENT", "NCOMMENT", "OCURLY", "CCURLY", 
		"VOCURLY", "VCCURLY", "SEMI", "CASE", "CLASS", "DATA", "DEFAULT", "DERIVING", 
		"DO", "ELSE", "EXPORT", "FOREIGN", "IF", "IMPORT", "IN", "INFIX", "INFIXL", 
		"INFIXR", "INSTANCE", "LET", "MODULE", "NEWTYPE", "OF", "THEN", "TYPE", 
		"WHERE", "WILDCARD", "QUALIFIED", "AS", "HIDING", "LANGUAGE", "INLINE", 
		"NOINLINE", "SPECIALIZE", "CCALL", "STDCALL", "CPPCALL", "JVMCALL", "DOTNETCALL", 
		"SAFE", "UNSAFE", "DoubleArrow", "DoubleColon", "Arrow", "Revarrow", "Hash", 
		"Less", "Greater", "Ampersand", "Pipe", "Bang", "Caret", "Plus", "Minus", 
		"Asterisk", "Percent", "Divide", "Tilde", "Atsign", "Dollar", "Dot", "Semi", 
		"DoubleDot", "QuestionMark", "OpenRoundBracket", "CloseRoundBracket", 
		"OpenSquareBracket", "CloseSquareBracket", "OpenCommentBracket", "CloseCommentBracket", 
		"Comma", "Colon", "Eq", "Quote", "DoubleQuote", "BackQuote", "CHAR", "STRING", 
		"VARID", "CONID", "DECIMAL", "OCTAL", "HEXADECIMAL", "FLOAT", "EXPONENT", 
		"ASCSYMBOL", "UNISYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GHaskellParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GHaskellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GHaskellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GHaskellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class VaridContext : ParserRuleContext {
		public ITerminalNode VARID() { return GetToken(GHaskellParser.VARID, 0); }
		public VaridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterVarid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitVarid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VaridContext varid() {
		VaridContext _localctx = new VaridContext(Context, State);
		EnterRule(_localctx, 0, RULE_varid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConidContext : ParserRuleContext {
		public ITerminalNode CONID() { return GetToken(GHaskellParser.CONID, 0); }
		public ConidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterConid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitConid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConidContext conid() {
		ConidContext _localctx = new ConidContext(Context, State);
		EnterRule(_localctx, 2, RULE_conid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(CONID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscSymbolContext : ParserRuleContext {
		public ITerminalNode Bang() { return GetToken(GHaskellParser.Bang, 0); }
		public ITerminalNode Hash() { return GetToken(GHaskellParser.Hash, 0); }
		public ITerminalNode Dollar() { return GetToken(GHaskellParser.Dollar, 0); }
		public ITerminalNode Percent() { return GetToken(GHaskellParser.Percent, 0); }
		public ITerminalNode Ampersand() { return GetToken(GHaskellParser.Ampersand, 0); }
		public ITerminalNode Asterisk() { return GetToken(GHaskellParser.Asterisk, 0); }
		public ITerminalNode Plus() { return GetToken(GHaskellParser.Plus, 0); }
		public ITerminalNode Dot() { return GetToken(GHaskellParser.Dot, 0); }
		public ITerminalNode Divide() { return GetToken(GHaskellParser.Divide, 0); }
		public ITerminalNode Less() { return GetToken(GHaskellParser.Less, 0); }
		public ITerminalNode Eq() { return GetToken(GHaskellParser.Eq, 0); }
		public ITerminalNode Greater() { return GetToken(GHaskellParser.Greater, 0); }
		public ITerminalNode QuestionMark() { return GetToken(GHaskellParser.QuestionMark, 0); }
		public ITerminalNode Atsign() { return GetToken(GHaskellParser.Atsign, 0); }
		public ITerminalNode DoubleQuote() { return GetToken(GHaskellParser.DoubleQuote, 0); }
		public ITerminalNode Caret() { return GetToken(GHaskellParser.Caret, 0); }
		public ITerminalNode Pipe() { return GetToken(GHaskellParser.Pipe, 0); }
		public ITerminalNode Minus() { return GetToken(GHaskellParser.Minus, 0); }
		public ITerminalNode Tilde() { return GetToken(GHaskellParser.Tilde, 0); }
		public ITerminalNode Colon() { return GetToken(GHaskellParser.Colon, 0); }
		public AscSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascSymbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterAscSymbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitAscSymbol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AscSymbolContext ascSymbol() {
		AscSymbolContext _localctx = new AscSymbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_ascSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (Hash - 53)) | (1L << (Less - 53)) | (1L << (Greater - 53)) | (1L << (Ampersand - 53)) | (1L << (Pipe - 53)) | (1L << (Bang - 53)) | (1L << (Caret - 53)) | (1L << (Plus - 53)) | (1L << (Minus - 53)) | (1L << (Asterisk - 53)) | (1L << (Percent - 53)) | (1L << (Divide - 53)) | (1L << (Tilde - 53)) | (1L << (Atsign - 53)) | (1L << (Dollar - 53)) | (1L << (Dot - 53)) | (1L << (QuestionMark - 53)) | (1L << (Colon - 53)) | (1L << (Eq - 53)) | (1L << (DoubleQuote - 53)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsymContext : ParserRuleContext {
		public AscSymbolContext[] ascSymbol() {
			return GetRuleContexts<AscSymbolContext>();
		}
		public AscSymbolContext ascSymbol(int i) {
			return GetRuleContext<AscSymbolContext>(i);
		}
		public VarsymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varsym; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterVarsym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitVarsym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarsym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarsymContext varsym() {
		VarsymContext _localctx = new VarsymContext(Context, State);
		EnterRule(_localctx, 6, RULE_varsym);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 68; ascSymbol();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsymContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(GHaskellParser.Colon, 0); }
		public AscSymbolContext[] ascSymbol() {
			return GetRuleContexts<AscSymbolContext>();
		}
		public AscSymbolContext ascSymbol(int i) {
			return GetRuleContext<AscSymbolContext>(i);
		}
		public ConsymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consym; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterConsym(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitConsym(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConsymContext consym() {
		ConsymContext _localctx = new ConsymContext(Context, State);
		EnterRule(_localctx, 8, RULE_consym);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(Colon);
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 74; ascSymbol();
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public ConContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_con; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterCon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitCon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConContext con() {
		ConContext _localctx = new ConContext(Context, State);
		EnterRule(_localctx, 10, RULE_con);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; conid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaropContext : ParserRuleContext {
		public VarsymContext varsym() {
			return GetRuleContext<VarsymContext>(0);
		}
		public ITerminalNode[] BackQuote() { return GetTokens(GHaskellParser.BackQuote); }
		public ITerminalNode BackQuote(int i) {
			return GetToken(GHaskellParser.BackQuote, i);
		}
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public VaropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterVarop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitVarop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VaropContext varop() {
		VaropContext _localctx = new VaropContext(Context, State);
		EnterRule(_localctx, 12, RULE_varop);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Hash:
			case Less:
			case Greater:
			case Ampersand:
			case Pipe:
			case Bang:
			case Caret:
			case Plus:
			case Minus:
			case Asterisk:
			case Percent:
			case Divide:
			case Tilde:
			case Atsign:
			case Dollar:
			case Dot:
			case QuestionMark:
			case Colon:
			case Eq:
			case DoubleQuote:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; varsym();
				}
				break;
			case BackQuote:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 83; Match(BackQuote);
				State = 84; varid();
				State = 85; Match(BackQuote);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConopContext : ParserRuleContext {
		public ConsymContext consym() {
			return GetRuleContext<ConsymContext>(0);
		}
		public ITerminalNode[] BackQuote() { return GetTokens(GHaskellParser.BackQuote); }
		public ITerminalNode BackQuote(int i) {
			return GetToken(GHaskellParser.BackQuote, i);
		}
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public ConopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterConop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitConop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConopContext conop() {
		ConopContext _localctx = new ConopContext(Context, State);
		EnterRule(_localctx, 14, RULE_conop);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Colon:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; consym();
				}
				break;
			case BackQuote:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 90; Match(BackQuote);
				State = 91; conid();
				State = 92; Match(BackQuote);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public VaropContext varop() {
			return GetRuleContext<VaropContext>(0);
		}
		public ConopContext conop() {
			return GetRuleContext<ConopContext>(0);
		}
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 16, RULE_op);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; varop();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; conop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GHaskellParser.Eof, 0); }
		public TopdeclContext[] topdecl() {
			return GetRuleContexts<TopdeclContext>();
		}
		public TopdeclContext topdecl(int i) {
			return GetRuleContext<TopdeclContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(GHaskellParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(GHaskellParser.NEWLINE, i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 18, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DATA || _la==VARID) {
				{
				{
				State = 100; topdecl();
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 101; Match(NEWLINE);
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TyconContext : ParserRuleContext {
		public ConidContext conid() {
			return GetRuleContext<ConidContext>(0);
		}
		public TyconContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tycon; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterTycon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitTycon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTycon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TyconContext tycon() {
		TyconContext _localctx = new TyconContext(Context, State);
		EnterRule(_localctx, 20, RULE_tycon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; conid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtypeContext : ParserRuleContext {
		public TyconContext tycon() {
			return GetRuleContext<TyconContext>(0);
		}
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public ITerminalNode OpenRoundBracket() { return GetToken(GHaskellParser.OpenRoundBracket, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CloseRoundBracket() { return GetToken(GHaskellParser.CloseRoundBracket, 0); }
		public AtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterAtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitAtype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtypeContext atype() {
		AtypeContext _localctx = new AtypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_atype);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; tycon();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; varid();
				}
				break;
			case OpenRoundBracket:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118; Match(OpenRoundBracket);
				State = 119; type();
				State = 120; Match(CloseRoundBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public AtypeContext[] atype() {
			return GetRuleContexts<AtypeContext>();
		}
		public AtypeContext atype(int i) {
			return GetRuleContext<AtypeContext>(i);
		}
		public ITerminalNode Arrow() { return GetToken(GHaskellParser.Arrow, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 124; atype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Arrow) {
				{
				State = 129; Match(Arrow);
				State = 130; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrContext : ParserRuleContext {
		public ConContext con() {
			return GetRuleContext<ConContext>(0);
		}
		public AtypeContext[] atype() {
			return GetRuleContexts<AtypeContext>();
		}
		public AtypeContext atype(int i) {
			return GetRuleContext<AtypeContext>(i);
		}
		public ConstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterConstr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitConstr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstrContext constr() {
		ConstrContext _localctx = new ConstrContext(Context, State);
		EnterRule(_localctx, 26, RULE_constr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; con();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (OpenRoundBracket - 72)) | (1L << (VARID - 72)) | (1L << (CONID - 72)))) != 0)) {
				{
				{
				State = 134; atype();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrsContext : ParserRuleContext {
		public ConstrContext[] constr() {
			return GetRuleContexts<ConstrContext>();
		}
		public ConstrContext constr(int i) {
			return GetRuleContext<ConstrContext>(i);
		}
		public ITerminalNode[] Pipe() { return GetTokens(GHaskellParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(GHaskellParser.Pipe, i);
		}
		public ConstrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterConstrs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitConstrs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstrs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstrsContext constrs() {
		ConstrsContext _localctx = new ConstrsContext(Context, State);
		EnterRule(_localctx, 28, RULE_constrs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; constr();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Pipe) {
				{
				{
				State = 141; Match(Pipe);
				State = 142; constr();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypeContext : ParserRuleContext {
		public TyconContext tycon() {
			return GetRuleContext<TyconContext>(0);
		}
		public VaridContext[] varid() {
			return GetRuleContexts<VaridContext>();
		}
		public VaridContext varid(int i) {
			return GetRuleContext<VaridContext>(i);
		}
		public SimpletypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterSimpletype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitSimpletype(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpletype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypeContext simpletype() {
		SimpletypeContext _localctx = new SimpletypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_simpletype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; tycon();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VARID) {
				{
				{
				State = 149; varid();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 32, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; varid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GendeclContext : ParserRuleContext {
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(GHaskellParser.DoubleColon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public GendeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gendecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterGendecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitGendecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGendecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GendeclContext gendecl() {
		GendeclContext _localctx = new GendeclContext(Context, State);
		EnterRule(_localctx, 34, RULE_gendecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; varid();
			State = 158; Match(DoubleColon);
			State = 159; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(GHaskellParser.DECIMAL, 0); }
		public ITerminalNode OCTAL() { return GetToken(GHaskellParser.OCTAL, 0); }
		public ITerminalNode HEXADECIMAL() { return GetToken(GHaskellParser.HEXADECIMAL, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 36, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (DECIMAL - 88)) | (1L << (OCTAL - 88)) | (1L << (HEXADECIMAL - 88)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PfloatContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(GHaskellParser.FLOAT, 0); }
		public PfloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pfloat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterPfloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitPfloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPfloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PfloatContext pfloat() {
		PfloatContext _localctx = new PfloatContext(Context, State);
		EnterRule(_localctx, 38, RULE_pfloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PcharContext : ParserRuleContext {
		public ITerminalNode CHAR() { return GetToken(GHaskellParser.CHAR, 0); }
		public PcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pchar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterPchar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitPchar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPchar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PcharContext pchar() {
		PcharContext _localctx = new PcharContext(Context, State);
		EnterRule(_localctx, 40, RULE_pchar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(CHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PstringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(GHaskellParser.STRING, 0); }
		public PstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pstring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterPstring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitPstring(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PstringContext pstring() {
		PstringContext _localctx = new PstringContext(Context, State);
		EnterRule(_localctx, 42, RULE_pstring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public PfloatContext pfloat() {
			return GetRuleContext<PfloatContext>(0);
		}
		public PcharContext pchar() {
			return GetRuleContext<PcharContext>(0);
		}
		public PstringContext pstring() {
			return GetRuleContext<PstringContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_literal);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
			case OCTAL:
			case HEXADECIMAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; integer();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170; pfloat();
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171; pchar();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 172; pstring();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ApatContext : ParserRuleContext {
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode WILDCARD() { return GetToken(GHaskellParser.WILDCARD, 0); }
		public ApatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_apat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterApat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitApat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ApatContext apat() {
		ApatContext _localctx = new ApatContext(Context, State);
		EnterRule(_localctx, 46, RULE_apat);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; varid();
				}
				break;
			case CHAR:
			case STRING:
			case DECIMAL:
			case OCTAL:
			case HEXADECIMAL:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; literal();
				}
				break;
			case WILDCARD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; Match(WILDCARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunlhsContext : ParserRuleContext {
		public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		public ApatContext[] apat() {
			return GetRuleContexts<ApatContext>();
		}
		public ApatContext apat(int i) {
			return GetRuleContext<ApatContext>(i);
		}
		public FunlhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funlhs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterFunlhs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitFunlhs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunlhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunlhsContext funlhs() {
		FunlhsContext _localctx = new FunlhsContext(Context, State);
		EnterRule(_localctx, 48, RULE_funlhs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; varid();
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (WILDCARD - 34)) | (1L << (CHAR - 34)) | (1L << (STRING - 34)) | (1L << (VARID - 34)) | (1L << (DECIMAL - 34)) | (1L << (OCTAL - 34)) | (1L << (HEXADECIMAL - 34)) | (1L << (FLOAT - 34)))) != 0)) {
				{
				{
				State = 181; apat();
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexpContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(GHaskellParser.LET, 0); }
		public ITerminalNode IN() { return GetToken(GHaskellParser.IN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public ITerminalNode IF() { return GetToken(GHaskellParser.IF, 0); }
		public ITerminalNode THEN() { return GetToken(GHaskellParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(GHaskellParser.ELSE, 0); }
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode[] OpenRoundBracket() { return GetTokens(GHaskellParser.OpenRoundBracket); }
		public ITerminalNode OpenRoundBracket(int i) {
			return GetToken(GHaskellParser.OpenRoundBracket, i);
		}
		public ITerminalNode[] CloseRoundBracket() { return GetTokens(GHaskellParser.CloseRoundBracket); }
		public ITerminalNode CloseRoundBracket(int i) {
			return GetToken(GHaskellParser.CloseRoundBracket, i);
		}
		public ITerminalNode Minus() { return GetToken(GHaskellParser.Minus, 0); }
		public LexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterLexp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitLexp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexpContext lexp() {
		LexpContext _localctx = new LexpContext(Context, State);
		EnterRule(_localctx, 50, RULE_lexp);
		int _la;
		try {
			int _alt;
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; Match(LET);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VARID) {
					{
					{
					State = 188; decl();
					}
					}
					State = 193;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 194; Match(IN);
				State = 195; exp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; Match(IF);
				State = 197; exp();
				State = 198; Match(THEN);
				State = 199; exp();
				State = 200; Match(ELSE);
				State = 201; exp();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203; var();
				State = 210;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 210;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case VARID:
							{
							State = 204; var();
							}
							break;
						case CHAR:
						case STRING:
						case DECIMAL:
						case OCTAL:
						case HEXADECIMAL:
						case FLOAT:
							{
							State = 205; literal();
							}
							break;
						case OpenRoundBracket:
							{
							State = 206; Match(OpenRoundBracket);
							State = 207; exp();
							State = 208; Match(CloseRoundBracket);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 212;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 214; var();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 215; literal();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 216; Match(Minus);
				State = 217; exp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 218; Match(OpenRoundBracket);
				State = 219; exp();
				State = 220; Match(CloseRoundBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QopContext : ParserRuleContext {
		public VaropContext varop() {
			return GetRuleContext<VaropContext>(0);
		}
		public ConopContext conop() {
			return GetRuleContext<ConopContext>(0);
		}
		public QopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterQop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitQop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QopContext qop() {
		QopContext _localctx = new QopContext(Context, State);
		EnterRule(_localctx, 52, RULE_qop);
		try {
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; varop();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 225; conop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public LexpContext lexp() {
			return GetRuleContext<LexpContext>(0);
		}
		public QopContext qop() {
			return GetRuleContext<QopContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 54, RULE_exp);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; lexp();
				State = 229; qop();
				State = 230; exp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; lexp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RhsContext : ParserRuleContext {
		public ITerminalNode Eq() { return GetToken(GHaskellParser.Eq, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(GHaskellParser.NEWLINE, 0); }
		public ITerminalNode WHERE() { return GetToken(GHaskellParser.WHERE, 0); }
		public DeclContext[] decl() {
			return GetRuleContexts<DeclContext>();
		}
		public DeclContext decl(int i) {
			return GetRuleContext<DeclContext>(i);
		}
		public RhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rhs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterRhs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitRhs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RhsContext rhs() {
		RhsContext _localctx = new RhsContext(Context, State);
		EnterRule(_localctx, 56, RULE_rhs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(Eq);
			State = 236; exp();
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 237; Match(NEWLINE);
				State = 238; Match(WHERE);
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 239; decl();
						}
						} 
					}
					State = 244;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		public GendeclContext gendecl() {
			return GetRuleContext<GendeclContext>(0);
		}
		public FunlhsContext funlhs() {
			return GetRuleContext<FunlhsContext>(0);
		}
		public RhsContext rhs() {
			return GetRuleContext<RhsContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 58, RULE_decl);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; gendecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; funlhs();
				State = 249; rhs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopdeclContext : ParserRuleContext {
		public ITerminalNode DATA() { return GetToken(GHaskellParser.DATA, 0); }
		public SimpletypeContext simpletype() {
			return GetRuleContext<SimpletypeContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(GHaskellParser.NEWLINE, 0); }
		public ITerminalNode Eq() { return GetToken(GHaskellParser.Eq, 0); }
		public ConstrsContext constrs() {
			return GetRuleContext<ConstrsContext>(0);
		}
		public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		public TopdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topdecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.EnterTopdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGHaskellParserListener typedListener = listener as IGHaskellParserListener;
			if (typedListener != null) typedListener.ExitTopdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGHaskellParserVisitor<TResult> typedVisitor = visitor as IGHaskellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopdeclContext topdecl() {
		TopdeclContext _localctx = new TopdeclContext(Context, State);
		EnterRule(_localctx, 60, RULE_topdecl);
		int _la;
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253; Match(DATA);
				State = 254; simpletype();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Eq) {
					{
					State = 255; Match(Eq);
					State = 256; constrs();
					}
				}

				State = 259; Match(NEWLINE);
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; decl();
				State = 262; Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '`', '\x10D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', 'H', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', 'I', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'N', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Q', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'Z', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x61', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x65', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', 'i', '\n', '\v', '\f', '\v', '\xE', '\v', 'l', '\v', 
		'\v', '\a', '\v', 'n', '\n', '\v', '\f', '\v', '\xE', '\v', 'q', '\v', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '}', '\n', '\r', '\x3', '\xE', '\x6', '\xE', '\x80', '\n', '\xE', 
		'\r', '\xE', '\xE', '\xE', '\x81', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x86', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x8A', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x8D', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x92', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x95', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x99', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x9C', 
		'\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\xB0', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\xB5', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\xB9', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\xBC', '\v', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\xC0', '\n', '\x1B', '\f', 
		'\x1B', '\xE', '\x1B', '\xC3', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x6', '\x1B', 
		'\xD5', '\n', '\x1B', '\r', '\x1B', '\xE', '\x1B', '\xD6', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xE1', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xE5', '\n', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\xEC', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\a', '\x1E', '\xF3', '\n', '\x1E', '\f', '\x1E', 
		'\xE', '\x1E', '\xF6', '\v', '\x1E', '\x5', '\x1E', '\xF8', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\xFE', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x104', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x10B', '\n', ' ', '\x3', ' ', '\x2', '\x2', 
		'!', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '\x2', 
		'\x4', '\x6', '\x2', '\x37', '\x46', 'I', 'I', 'Q', 'R', 'T', 'T', '\x3', 
		'\x2', 'Z', '\\', '\x2', '\x112', '\x2', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x42', '\x3', '\x2', '\x2', '\x2', '\x6', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\b', 'G', '\x3', '\x2', '\x2', '\x2', '\n', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', '\x2', '\x2', '\xE', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '`', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x14', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 't', '\x3', '\x2', '\x2', '\x2', '\x18', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x96', '\x3', '\x2', '\x2', '\x2', '\"', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x9F', '\x3', '\x2', '\x2', '\x2', '&', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xA5', '\x3', '\x2', '\x2', '\x2', '*', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xA9', '\x3', '\x2', '\x2', '\x2', '.', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x34', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x38', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', ':', '\xED', '\x3', '\x2', '\x2', '\x2', '<', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '>', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\a', 'X', '\x2', '\x2', '\x41', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x43', '\a', 'Y', '\x2', '\x2', '\x43', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\t', '\x2', '\x2', '\x2', 
		'\x45', '\a', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x5', '\x6', '\x4', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\t', '\x3', '\x2', '\x2', '\x2', 'K', 'O', '\a', 'Q', 
		'\x2', '\x2', 'L', 'N', '\x5', '\x6', '\x4', '\x2', 'M', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', 
		'\x4', '\x3', '\x2', 'S', '\r', '\x3', '\x2', '\x2', '\x2', 'T', 'Z', 
		'\x5', '\b', '\x5', '\x2', 'U', 'V', '\a', 'U', '\x2', '\x2', 'V', 'W', 
		'\x5', '\x2', '\x2', '\x2', 'W', 'X', '\a', 'U', '\x2', '\x2', 'X', 'Z', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'T', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'U', '\x3', '\x2', '\x2', '\x2', 'Z', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'[', '\x61', '\x5', '\n', '\x6', '\x2', '\\', ']', '\a', 'U', '\x2', '\x2', 
		']', '^', '\x5', '\x4', '\x3', '\x2', '^', '_', '\a', 'U', '\x2', '\x2', 
		'_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', '[', '\x3', '\x2', '\x2', 
		'\x2', '`', '\\', '\x3', '\x2', '\x2', '\x2', '\x61', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x65', '\x5', '\xE', '\b', '\x2', '\x63', '\x65', 
		'\x5', '\x10', '\t', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'j', '\x5', '>', ' ', '\x2', 'g', 'i', '\a', '\x3', 
		'\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'm', '\x66', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\a', '\x2', '\x2', '\x3', 's', '\x15', 
		'\x3', '\x2', '\x2', '\x2', 't', 'u', '\x5', '\x4', '\x3', '\x2', 'u', 
		'\x17', '\x3', '\x2', '\x2', '\x2', 'v', '}', '\x5', '\x16', '\f', '\x2', 
		'w', '}', '\x5', '\x2', '\x2', '\x2', 'x', 'y', '\a', 'J', '\x2', '\x2', 
		'y', 'z', '\x5', '\x1A', '\xE', '\x2', 'z', '{', '\a', 'K', '\x2', '\x2', 
		'{', '}', '\x3', '\x2', '\x2', '\x2', '|', 'v', '\x3', '\x2', '\x2', '\x2', 
		'|', 'w', '\x3', '\x2', '\x2', '\x2', '|', 'x', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x19', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x5', '\x18', '\r', 
		'\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '\x35', '\x2', '\x2', '\x84', '\x86', '\x5', 
		'\x1A', '\xE', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x8B', '\x5', '\f', '\a', '\x2', '\x88', '\x8A', '\x5', 
		'\x18', '\r', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x93', '\x5', '\x1C', '\xF', '\x2', '\x8F', '\x90', '\a', ';', '\x2', 
		'\x2', '\x90', '\x92', '\x5', '\x1C', '\xF', '\x2', '\x91', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x9A', '\x5', '\x16', '\f', '\x2', '\x97', 
		'\x99', '\x5', '\x2', '\x2', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x5', '\x2', '\x2', '\x2', '\x9E', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x34', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\x1A', '\xE', 
		'\x2', '\xA2', '%', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\t', 
		'\x3', '\x2', '\x2', '\xA4', '\'', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', ']', '\x2', '\x2', '\xA6', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\a', 'V', '\x2', '\x2', '\xA8', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', 'W', '\x2', '\x2', '\xAA', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xB0', '\x5', '&', '\x14', '\x2', '\xAC', '\xB0', 
		'\x5', '(', '\x15', '\x2', '\xAD', '\xB0', '\x5', '*', '\x16', '\x2', 
		'\xAE', '\xB0', '\x5', ',', '\x17', '\x2', '\xAF', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '/', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB5', '\x5', '\x2', 
		'\x2', '\x2', '\xB2', '\xB5', '\x5', '.', '\x18', '\x2', '\xB3', '\xB5', 
		'\a', '$', '\x2', '\x2', '\xB4', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\x31', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xBA', '\x5', 
		'\x2', '\x2', '\x2', '\xB7', '\xB9', '\x5', '\x30', '\x19', '\x2', '\xB8', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\x33', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC1', '\a', '\x1D', '\x2', 
		'\x2', '\xBE', '\xC0', '\x5', '<', '\x1F', '\x2', '\xBF', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x18', '\x2', '\x2', '\xC5', 
		'\xE1', '\x5', '\x38', '\x1D', '\x2', '\xC6', '\xC7', '\a', '\x16', '\x2', 
		'\x2', '\xC7', '\xC8', '\x5', '\x38', '\x1D', '\x2', '\xC8', '\xC9', '\a', 
		'!', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\x38', '\x1D', '\x2', '\xCA', 
		'\xCB', '\a', '\x13', '\x2', '\x2', '\xCB', '\xCC', '\x5', '\x38', '\x1D', 
		'\x2', '\xCC', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD4', '\x5', 
		'\"', '\x12', '\x2', '\xCE', '\xD5', '\x5', '\"', '\x12', '\x2', '\xCF', 
		'\xD5', '\x5', '.', '\x18', '\x2', '\xD0', '\xD1', '\a', 'J', '\x2', '\x2', 
		'\xD1', '\xD2', '\x5', '\x38', '\x1D', '\x2', '\xD2', '\xD3', '\a', 'K', 
		'\x2', '\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xE1', '\x5', '\"', '\x12', '\x2', '\xD9', '\xE1', '\x5', '.', 
		'\x18', '\x2', '\xDA', '\xDB', '\a', '?', '\x2', '\x2', '\xDB', '\xE1', 
		'\x5', '\x38', '\x1D', '\x2', '\xDC', '\xDD', '\a', 'J', '\x2', '\x2', 
		'\xDD', '\xDE', '\x5', '\x38', '\x1D', '\x2', '\xDE', '\xDF', '\a', 'K', 
		'\x2', '\x2', '\xDF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\x35', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x5', '\xE', 
		'\b', '\x2', '\xE3', '\xE5', '\x5', '\x10', '\t', '\x2', '\xE4', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\x37', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x34', 
		'\x1B', '\x2', '\xE7', '\xE8', '\x5', '\x36', '\x1C', '\x2', '\xE8', '\xE9', 
		'\x5', '\x38', '\x1D', '\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xEC', '\x5', '\x34', '\x1B', '\x2', '\xEB', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', 'R', '\x2', '\x2', '\xEE', 
		'\xF7', '\x5', '\x38', '\x1D', '\x2', '\xEF', '\xF0', '\a', '\x3', '\x2', 
		'\x2', '\xF0', '\xF4', '\a', '#', '\x2', '\x2', '\xF1', '\xF3', '\x5', 
		'<', '\x1F', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', ';', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFE', '\x5', 
		'$', '\x13', '\x2', '\xFA', '\xFB', '\x5', '\x32', '\x1A', '\x2', '\xFB', 
		'\xFC', '\x5', ':', '\x1E', '\x2', '\xFC', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '=', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x100', '\a', '\xF', '\x2', '\x2', '\x100', '\x103', '\x5', ' ', '\x11', 
		'\x2', '\x101', '\x102', '\a', 'R', '\x2', '\x2', '\x102', '\x104', '\x5', 
		'\x1E', '\x10', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\a', '\x3', '\x2', '\x2', '\x106', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x5', '<', '\x1F', '\x2', 
		'\x108', '\x109', '\a', '\x3', '\x2', '\x2', '\x109', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x10B', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'I', 'O', 'Y', '`', '\x64', 'j', 'o', '|', '\x81', '\x85', 
		'\x8B', '\x93', '\x9A', '\xAF', '\xB4', '\xBA', '\xC1', '\xD4', '\xD6', 
		'\xE0', '\xE4', '\xEB', '\xF4', '\xF7', '\xFD', '\x103', '\x10A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
